// Code generated by GENERATOR. DO NOT EDIT.

import * as jspb from "google-protobuf"

import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as gogoproto_gogo_pb from '../../../../gogoproto/gogo_pb';
import * as onos_config_change_types_pb from '../../../../onos/config/change/types_pb';

export class DeviceChange extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getIndex(): number;
  setIndex(value: number): void;

  getRevision(): number;
  setRevision(value: number): void;

  getNetworkChange(): NetworkChangeRef | undefined;
  setNetworkChange(value?: NetworkChangeRef): void;
  hasNetworkChange(): boolean;
  clearNetworkChange(): void;

  getChange(): Change | undefined;
  setChange(value?: Change): void;
  hasChange(): boolean;
  clearChange(): void;

  getStatus(): onos_config_change_types_pb.Status | undefined;
  setStatus(value?: onos_config_change_types_pb.Status): void;
  hasStatus(): boolean;
  clearStatus(): void;

  getCreated(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreated(value?: google_protobuf_timestamp_pb.Timestamp): void;
  hasCreated(): boolean;
  clearCreated(): void;

  getUpdated(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setUpdated(value?: google_protobuf_timestamp_pb.Timestamp): void;
  hasUpdated(): boolean;
  clearUpdated(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeviceChange.AsObject;
  static toObject(includeInstance: boolean, msg: DeviceChange): DeviceChange.AsObject;
  static serializeBinaryToWriter(message: DeviceChange, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeviceChange;
  static deserializeBinaryFromReader(message: DeviceChange, reader: jspb.BinaryReader): DeviceChange;
}

export namespace DeviceChange {
  export type AsObject = {
    id: string,
    index: number,
    revision: number,
    networkChange?: NetworkChangeRef.AsObject,
    change?: Change.AsObject,
    status?: onos_config_change_types_pb.Status.AsObject,
    created?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    updated?: google_protobuf_timestamp_pb.Timestamp.AsObject,
  }
}

export class NetworkChangeRef extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getIndex(): number;
  setIndex(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NetworkChangeRef.AsObject;
  static toObject(includeInstance: boolean, msg: NetworkChangeRef): NetworkChangeRef.AsObject;
  static serializeBinaryToWriter(message: NetworkChangeRef, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NetworkChangeRef;
  static deserializeBinaryFromReader(message: NetworkChangeRef, reader: jspb.BinaryReader): NetworkChangeRef;
}

export namespace NetworkChangeRef {
  export type AsObject = {
    id: string,
    index: number,
  }
}

export class Change extends jspb.Message {
  getDeviceId(): string;
  setDeviceId(value: string): void;

  getDeviceVersion(): string;
  setDeviceVersion(value: string): void;

  getDeviceType(): string;
  setDeviceType(value: string): void;

  getValuesList(): Array<ChangeValue>;
  setValuesList(value: Array<ChangeValue>): void;
  clearValuesList(): void;
  addValues(value?: ChangeValue, index?: number): ChangeValue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Change.AsObject;
  static toObject(includeInstance: boolean, msg: Change): Change.AsObject;
  static serializeBinaryToWriter(message: Change, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Change;
  static deserializeBinaryFromReader(message: Change, reader: jspb.BinaryReader): Change;
}

export namespace Change {
  export type AsObject = {
    deviceId: string,
    deviceVersion: string,
    deviceType: string,
    valuesList: Array<ChangeValue.AsObject>,
  }
}

export class TypedValue extends jspb.Message {
  getBytes(): Uint8Array | string;
  getBytes_asU8(): Uint8Array;
  getBytes_asB64(): string;
  setBytes(value: Uint8Array | string): void;

  getType(): ValueType;
  setType(value: ValueType): void;

  getTypeOptsList(): Array<number>;
  setTypeOptsList(value: Array<number>): void;
  clearTypeOptsList(): void;
  addTypeOpts(value: number, index?: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TypedValue.AsObject;
  static toObject(includeInstance: boolean, msg: TypedValue): TypedValue.AsObject;
  static serializeBinaryToWriter(message: TypedValue, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TypedValue;
  static deserializeBinaryFromReader(message: TypedValue, reader: jspb.BinaryReader): TypedValue;
}

export namespace TypedValue {
  export type AsObject = {
    bytes: Uint8Array | string,
    type: ValueType,
    typeOptsList: Array<number>,
  }
}

export class ChangeValue extends jspb.Message {
  getPath(): string;
  setPath(value: string): void;

  getValue(): TypedValue | undefined;
  setValue(value?: TypedValue): void;
  hasValue(): boolean;
  clearValue(): void;

  getRemoved(): boolean;
  setRemoved(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChangeValue.AsObject;
  static toObject(includeInstance: boolean, msg: ChangeValue): ChangeValue.AsObject;
  static serializeBinaryToWriter(message: ChangeValue, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChangeValue;
  static deserializeBinaryFromReader(message: ChangeValue, reader: jspb.BinaryReader): ChangeValue;
}

export namespace ChangeValue {
  export type AsObject = {
    path: string,
    value?: TypedValue.AsObject,
    removed: boolean,
  }
}

export class PathValue extends jspb.Message {
  getPath(): string;
  setPath(value: string): void;

  getValue(): TypedValue | undefined;
  setValue(value?: TypedValue): void;
  hasValue(): boolean;
  clearValue(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PathValue.AsObject;
  static toObject(includeInstance: boolean, msg: PathValue): PathValue.AsObject;
  static serializeBinaryToWriter(message: PathValue, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PathValue;
  static deserializeBinaryFromReader(message: PathValue, reader: jspb.BinaryReader): PathValue;
}

export namespace PathValue {
  export type AsObject = {
    path: string,
    value?: TypedValue.AsObject,
  }
}

export enum ValueType { 
  EMPTY = 0,
  STRING = 1,
  INT = 2,
  UINT = 3,
  BOOL = 4,
  DECIMAL = 5,
  FLOAT = 6,
  BYTES = 7,
  LEAFLIST_STRING = 8,
  LEAFLIST_INT = 9,
  LEAFLIST_UINT = 10,
  LEAFLIST_BOOL = 11,
  LEAFLIST_DECIMAL = 12,
  LEAFLIST_FLOAT = 13,
  LEAFLIST_BYTES = 14,
}
