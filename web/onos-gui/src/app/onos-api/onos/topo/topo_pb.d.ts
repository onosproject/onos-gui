// Code generated by GENERATOR. DO NOT EDIT.

import * as jspb from "google-protobuf"

import * as gogoproto_gogo_pb from '../../gogoproto/gogo_pb';

export class Event extends jspb.Message {
  getType(): EventType;
  setType(value: EventType): void;

  getObject(): Object | undefined;
  setObject(value?: Object): void;
  hasObject(): boolean;
  clearObject(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Event.AsObject;
  static toObject(includeInstance: boolean, msg: Event): Event.AsObject;
  static serializeBinaryToWriter(message: Event, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Event;
  static deserializeBinaryFromReader(message: Event, reader: jspb.BinaryReader): Event;
}

export namespace Event {
  export type AsObject = {
    type: EventType,
    object?: Object.AsObject,
  }
}

export class CreateRequest extends jspb.Message {
  getObject(): Object | undefined;
  setObject(value?: Object): void;
  hasObject(): boolean;
  clearObject(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateRequest): CreateRequest.AsObject;
  static serializeBinaryToWriter(message: CreateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateRequest;
  static deserializeBinaryFromReader(message: CreateRequest, reader: jspb.BinaryReader): CreateRequest;
}

export namespace CreateRequest {
  export type AsObject = {
    object?: Object.AsObject,
  }
}

export class CreateResponse extends jspb.Message {
  getObject(): Object | undefined;
  setObject(value?: Object): void;
  hasObject(): boolean;
  clearObject(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CreateResponse): CreateResponse.AsObject;
  static serializeBinaryToWriter(message: CreateResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateResponse;
  static deserializeBinaryFromReader(message: CreateResponse, reader: jspb.BinaryReader): CreateResponse;
}

export namespace CreateResponse {
  export type AsObject = {
    object?: Object.AsObject,
  }
}

export class GetRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetRequest): GetRequest.AsObject;
  static serializeBinaryToWriter(message: GetRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetRequest;
  static deserializeBinaryFromReader(message: GetRequest, reader: jspb.BinaryReader): GetRequest;
}

export namespace GetRequest {
  export type AsObject = {
    id: string,
  }
}

export class GetResponse extends jspb.Message {
  getObject(): Object | undefined;
  setObject(value?: Object): void;
  hasObject(): boolean;
  clearObject(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetResponse): GetResponse.AsObject;
  static serializeBinaryToWriter(message: GetResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetResponse;
  static deserializeBinaryFromReader(message: GetResponse, reader: jspb.BinaryReader): GetResponse;
}

export namespace GetResponse {
  export type AsObject = {
    object?: Object.AsObject,
  }
}

export class UpdateRequest extends jspb.Message {
  getObject(): Object | undefined;
  setObject(value?: Object): void;
  hasObject(): boolean;
  clearObject(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateRequest): UpdateRequest.AsObject;
  static serializeBinaryToWriter(message: UpdateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateRequest;
  static deserializeBinaryFromReader(message: UpdateRequest, reader: jspb.BinaryReader): UpdateRequest;
}

export namespace UpdateRequest {
  export type AsObject = {
    object?: Object.AsObject,
  }
}

export class UpdateResponse extends jspb.Message {
  getObject(): Object | undefined;
  setObject(value?: Object): void;
  hasObject(): boolean;
  clearObject(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateResponse.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateResponse): UpdateResponse.AsObject;
  static serializeBinaryToWriter(message: UpdateResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateResponse;
  static deserializeBinaryFromReader(message: UpdateResponse, reader: jspb.BinaryReader): UpdateResponse;
}

export namespace UpdateResponse {
  export type AsObject = {
    object?: Object.AsObject,
  }
}

export class DeleteRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeleteRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DeleteRequest): DeleteRequest.AsObject;
  static serializeBinaryToWriter(message: DeleteRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeleteRequest;
  static deserializeBinaryFromReader(message: DeleteRequest, reader: jspb.BinaryReader): DeleteRequest;
}

export namespace DeleteRequest {
  export type AsObject = {
    id: string,
  }
}

export class DeleteResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeleteResponse.AsObject;
  static toObject(includeInstance: boolean, msg: DeleteResponse): DeleteResponse.AsObject;
  static serializeBinaryToWriter(message: DeleteResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeleteResponse;
  static deserializeBinaryFromReader(message: DeleteResponse, reader: jspb.BinaryReader): DeleteResponse;
}

export namespace DeleteResponse {
  export type AsObject = {
  }
}

export class ListRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListRequest): ListRequest.AsObject;
  static serializeBinaryToWriter(message: ListRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListRequest;
  static deserializeBinaryFromReader(message: ListRequest, reader: jspb.BinaryReader): ListRequest;
}

export namespace ListRequest {
  export type AsObject = {
  }
}

export class ListResponse extends jspb.Message {
  getObjectsList(): Array<Object>;
  setObjectsList(value: Array<Object>): void;
  clearObjectsList(): void;
  addObjects(value?: Object, index?: number): Object;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListResponse): ListResponse.AsObject;
  static serializeBinaryToWriter(message: ListResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListResponse;
  static deserializeBinaryFromReader(message: ListResponse, reader: jspb.BinaryReader): ListResponse;
}

export namespace ListResponse {
  export type AsObject = {
    objectsList: Array<Object.AsObject>,
  }
}

export class WatchRequest extends jspb.Message {
  getNoreplay(): boolean;
  setNoreplay(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WatchRequest.AsObject;
  static toObject(includeInstance: boolean, msg: WatchRequest): WatchRequest.AsObject;
  static serializeBinaryToWriter(message: WatchRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WatchRequest;
  static deserializeBinaryFromReader(message: WatchRequest, reader: jspb.BinaryReader): WatchRequest;
}

export namespace WatchRequest {
  export type AsObject = {
    noreplay: boolean,
  }
}

export class WatchResponse extends jspb.Message {
  getEvent(): Event | undefined;
  setEvent(value?: Event): void;
  hasEvent(): boolean;
  clearEvent(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WatchResponse.AsObject;
  static toObject(includeInstance: boolean, msg: WatchResponse): WatchResponse.AsObject;
  static serializeBinaryToWriter(message: WatchResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WatchResponse;
  static deserializeBinaryFromReader(message: WatchResponse, reader: jspb.BinaryReader): WatchResponse;
}

export namespace WatchResponse {
  export type AsObject = {
    event?: Event.AsObject,
  }
}

export class Object extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getRevision(): number;
  setRevision(value: number): void;

  getType(): Object.Type;
  setType(value: Object.Type): void;

  getEntity(): Entity | undefined;
  setEntity(value?: Entity): void;
  hasEntity(): boolean;
  clearEntity(): void;

  getRelation(): Relation | undefined;
  setRelation(value?: Relation): void;
  hasRelation(): boolean;
  clearRelation(): void;

  getKind(): Kind | undefined;
  setKind(value?: Kind): void;
  hasKind(): boolean;
  clearKind(): void;

  getAttributesMap(): jspb.Map<string, string>;
  clearAttributesMap(): void;

  getObjCase(): Object.ObjCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Object.AsObject;
  static toObject(includeInstance: boolean, msg: Object): Object.AsObject;
  static serializeBinaryToWriter(message: Object, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Object;
  static deserializeBinaryFromReader(message: Object, reader: jspb.BinaryReader): Object;
}

export namespace Object {
  export type AsObject = {
    id: string,
    revision: number,
    type: Object.Type,
    entity?: Entity.AsObject,
    relation?: Relation.AsObject,
    kind?: Kind.AsObject,
    attributesMap: Array<[string, string]>,
  }

  export enum Type { 
    UNSPECIFIED = 0,
    ENTITY = 1,
    RELATION = 2,
    KIND = 3,
  }

  export enum ObjCase { 
    OBJ_NOT_SET = 0,
    ENTITY = 4,
    RELATION = 5,
    KIND = 6,
  }
}

export class Entity extends jspb.Message {
  getKindId(): string;
  setKindId(value: string): void;

  getProtocolsList(): Array<ProtocolState>;
  setProtocolsList(value: Array<ProtocolState>): void;
  clearProtocolsList(): void;
  addProtocols(value?: ProtocolState, index?: number): ProtocolState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Entity.AsObject;
  static toObject(includeInstance: boolean, msg: Entity): Entity.AsObject;
  static serializeBinaryToWriter(message: Entity, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Entity;
  static deserializeBinaryFromReader(message: Entity, reader: jspb.BinaryReader): Entity;
}

export namespace Entity {
  export type AsObject = {
    kindId: string,
    protocolsList: Array<ProtocolState.AsObject>,
  }
}

export class Relation extends jspb.Message {
  getKindId(): string;
  setKindId(value: string): void;

  getSrcEntityId(): string;
  setSrcEntityId(value: string): void;

  getTgtEntityId(): string;
  setTgtEntityId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Relation.AsObject;
  static toObject(includeInstance: boolean, msg: Relation): Relation.AsObject;
  static serializeBinaryToWriter(message: Relation, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Relation;
  static deserializeBinaryFromReader(message: Relation, reader: jspb.BinaryReader): Relation;
}

export namespace Relation {
  export type AsObject = {
    kindId: string,
    srcEntityId: string,
    tgtEntityId: string,
  }
}

export class Kind extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getAttributesMap(): jspb.Map<string, string>;
  clearAttributesMap(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Kind.AsObject;
  static toObject(includeInstance: boolean, msg: Kind): Kind.AsObject;
  static serializeBinaryToWriter(message: Kind, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Kind;
  static deserializeBinaryFromReader(message: Kind, reader: jspb.BinaryReader): Kind;
}

export namespace Kind {
  export type AsObject = {
    name: string,
    attributesMap: Array<[string, string]>,
  }
}

export class ProtocolState extends jspb.Message {
  getProtocol(): Protocol;
  setProtocol(value: Protocol): void;

  getConnectivitystate(): ConnectivityState;
  setConnectivitystate(value: ConnectivityState): void;

  getChannelstate(): ChannelState;
  setChannelstate(value: ChannelState): void;

  getServicestate(): ServiceState;
  setServicestate(value: ServiceState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProtocolState.AsObject;
  static toObject(includeInstance: boolean, msg: ProtocolState): ProtocolState.AsObject;
  static serializeBinaryToWriter(message: ProtocolState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProtocolState;
  static deserializeBinaryFromReader(message: ProtocolState, reader: jspb.BinaryReader): ProtocolState;
}

export namespace ProtocolState {
  export type AsObject = {
    protocol: Protocol,
    connectivitystate: ConnectivityState,
    channelstate: ChannelState,
    servicestate: ServiceState,
  }
}

export enum EventType { 
  NONE = 0,
  ADDED = 1,
  UPDATED = 2,
  REMOVED = 3,
}
export enum Protocol { 
  UNKNOWN_PROTOCOL = 0,
  GNMI = 1,
  P4RUNTIME = 2,
  GNOI = 3,
  E2AP = 4,
}
export enum ConnectivityState { 
  UNKNOWN_CONNECTIVITY_STATE = 0,
  REACHABLE = 1,
  UNREACHABLE = 2,
}
export enum ChannelState { 
  UNKNOWN_CHANNEL_STATE = 0,
  CONNECTED = 1,
  DISCONNECTED = 2,
}
export enum ServiceState { 
  UNKNOWN_SERVICE_STATE = 0,
  AVAILABLE = 1,
  UNAVAILABLE = 2,
  CONNECTING = 3,
}
