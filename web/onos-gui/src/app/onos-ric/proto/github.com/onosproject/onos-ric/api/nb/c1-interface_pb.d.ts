// Code generated by GENERATOR. DO NOT EDIT.
import * as jspb from "google-protobuf"

export class ECGI extends jspb.Message {
  getPlmnid(): string;
  setPlmnid(value: string): void;

  getEcid(): string;
  setEcid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ECGI.AsObject;
  static toObject(includeInstance: boolean, msg: ECGI): ECGI.AsObject;
  static serializeBinaryToWriter(message: ECGI, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ECGI;
  static deserializeBinaryFromReader(message: ECGI, reader: jspb.BinaryReader): ECGI;
}

export namespace ECGI {
  export type AsObject = {
    plmnid: string,
    ecid: string,
  }
}

export class StationListRequest extends jspb.Message {
  getEcgi(): ECGI | undefined;
  setEcgi(value?: ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getSubscribe(): boolean;
  setSubscribe(value: boolean): void;

  getNoreplay(): boolean;
  setNoreplay(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StationListRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StationListRequest): StationListRequest.AsObject;
  static serializeBinaryToWriter(message: StationListRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StationListRequest;
  static deserializeBinaryFromReader(message: StationListRequest, reader: jspb.BinaryReader): StationListRequest;
}

export namespace StationListRequest {
  export type AsObject = {
    ecgi?: ECGI.AsObject,
    subscribe: boolean,
    noreplay: boolean,
  }
}

export class StationInfo extends jspb.Message {
  getEcgi(): ECGI | undefined;
  setEcgi(value?: ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getMaxnumconnectedues(): number;
  setMaxnumconnectedues(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StationInfo.AsObject;
  static toObject(includeInstance: boolean, msg: StationInfo): StationInfo.AsObject;
  static serializeBinaryToWriter(message: StationInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StationInfo;
  static deserializeBinaryFromReader(message: StationInfo, reader: jspb.BinaryReader): StationInfo;
}

export namespace StationInfo {
  export type AsObject = {
    ecgi?: ECGI.AsObject,
    maxnumconnectedues: number,
  }
}

export class StationLinkListRequest extends jspb.Message {
  getEcgi(): ECGI | undefined;
  setEcgi(value?: ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getSubscribe(): boolean;
  setSubscribe(value: boolean): void;

  getNoreplay(): boolean;
  setNoreplay(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StationLinkListRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StationLinkListRequest): StationLinkListRequest.AsObject;
  static serializeBinaryToWriter(message: StationLinkListRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StationLinkListRequest;
  static deserializeBinaryFromReader(message: StationLinkListRequest, reader: jspb.BinaryReader): StationLinkListRequest;
}

export namespace StationLinkListRequest {
  export type AsObject = {
    ecgi?: ECGI.AsObject,
    subscribe: boolean,
    noreplay: boolean,
  }
}

export class StationLinkInfo extends jspb.Message {
  getEcgi(): ECGI | undefined;
  setEcgi(value?: ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getNeighborecgiList(): Array<ECGI>;
  setNeighborecgiList(value: Array<ECGI>): void;
  clearNeighborecgiList(): void;
  addNeighborecgi(value?: ECGI, index?: number): ECGI;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StationLinkInfo.AsObject;
  static toObject(includeInstance: boolean, msg: StationLinkInfo): StationLinkInfo.AsObject;
  static serializeBinaryToWriter(message: StationLinkInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StationLinkInfo;
  static deserializeBinaryFromReader(message: StationLinkInfo, reader: jspb.BinaryReader): StationLinkInfo;
}

export namespace StationLinkInfo {
  export type AsObject = {
    ecgi?: ECGI.AsObject,
    neighborecgiList: Array<ECGI.AsObject>,
  }
}

export class UEListRequest extends jspb.Message {
  getCrnti(): string;
  setCrnti(value: string): void;

  getEcgi(): ECGI | undefined;
  setEcgi(value?: ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getSubscribe(): boolean;
  setSubscribe(value: boolean): void;

  getNoreplay(): boolean;
  setNoreplay(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UEListRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UEListRequest): UEListRequest.AsObject;
  static serializeBinaryToWriter(message: UEListRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UEListRequest;
  static deserializeBinaryFromReader(message: UEListRequest, reader: jspb.BinaryReader): UEListRequest;
}

export namespace UEListRequest {
  export type AsObject = {
    crnti: string,
    ecgi?: ECGI.AsObject,
    subscribe: boolean,
    noreplay: boolean,
  }
}

export class UEInfo extends jspb.Message {
  getCrnti(): string;
  setCrnti(value: string): void;

  getEcgi(): ECGI | undefined;
  setEcgi(value?: ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getImsi(): string;
  setImsi(value: string): void;

  getType(): UEInfoType;
  setType(value: UEInfoType): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UEInfo.AsObject;
  static toObject(includeInstance: boolean, msg: UEInfo): UEInfo.AsObject;
  static serializeBinaryToWriter(message: UEInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UEInfo;
  static deserializeBinaryFromReader(message: UEInfo, reader: jspb.BinaryReader): UEInfo;
}

export namespace UEInfo {
  export type AsObject = {
    crnti: string,
    ecgi?: ECGI.AsObject,
    imsi: string,
    type: UEInfoType,
  }
}

export class UELinkListRequest extends jspb.Message {
  getCrnti(): string;
  setCrnti(value: string): void;

  getEcgi(): ECGI | undefined;
  setEcgi(value?: ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getSubscribe(): boolean;
  setSubscribe(value: boolean): void;

  getNoreplay(): boolean;
  setNoreplay(value: boolean): void;

  getNoimsi(): boolean;
  setNoimsi(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UELinkListRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UELinkListRequest): UELinkListRequest.AsObject;
  static serializeBinaryToWriter(message: UELinkListRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UELinkListRequest;
  static deserializeBinaryFromReader(message: UELinkListRequest, reader: jspb.BinaryReader): UELinkListRequest;
}

export namespace UELinkListRequest {
  export type AsObject = {
    crnti: string,
    ecgi?: ECGI.AsObject,
    subscribe: boolean,
    noreplay: boolean,
    noimsi: boolean,
  }
}

export class ChannelQuality extends jspb.Message {
  getTargetecgi(): ECGI | undefined;
  setTargetecgi(value?: ECGI): void;
  hasTargetecgi(): boolean;
  clearTargetecgi(): void;

  getCqihist(): number;
  setCqihist(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChannelQuality.AsObject;
  static toObject(includeInstance: boolean, msg: ChannelQuality): ChannelQuality.AsObject;
  static serializeBinaryToWriter(message: ChannelQuality, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChannelQuality;
  static deserializeBinaryFromReader(message: ChannelQuality, reader: jspb.BinaryReader): ChannelQuality;
}

export namespace ChannelQuality {
  export type AsObject = {
    targetecgi?: ECGI.AsObject,
    cqihist: number,
  }
}

export class UELinkInfo extends jspb.Message {
  getCrnti(): string;
  setCrnti(value: string): void;

  getEcgi(): ECGI | undefined;
  setEcgi(value?: ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getChannelqualitiesList(): Array<ChannelQuality>;
  setChannelqualitiesList(value: Array<ChannelQuality>): void;
  clearChannelqualitiesList(): void;
  addChannelqualities(value?: ChannelQuality, index?: number): ChannelQuality;

  getImsi(): string;
  setImsi(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UELinkInfo.AsObject;
  static toObject(includeInstance: boolean, msg: UELinkInfo): UELinkInfo.AsObject;
  static serializeBinaryToWriter(message: UELinkInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UELinkInfo;
  static deserializeBinaryFromReader(message: UELinkInfo, reader: jspb.BinaryReader): UELinkInfo;
}

export namespace UELinkInfo {
  export type AsObject = {
    crnti: string,
    ecgi?: ECGI.AsObject,
    channelqualitiesList: Array<ChannelQuality.AsObject>,
    imsi: string,
  }
}

export class HandOverRequest extends jspb.Message {
  getCrnti(): string;
  setCrnti(value: string): void;

  getSrcstation(): ECGI | undefined;
  setSrcstation(value?: ECGI): void;
  hasSrcstation(): boolean;
  clearSrcstation(): void;

  getDststation(): ECGI | undefined;
  setDststation(value?: ECGI): void;
  hasDststation(): boolean;
  clearDststation(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HandOverRequest.AsObject;
  static toObject(includeInstance: boolean, msg: HandOverRequest): HandOverRequest.AsObject;
  static serializeBinaryToWriter(message: HandOverRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HandOverRequest;
  static deserializeBinaryFromReader(message: HandOverRequest, reader: jspb.BinaryReader): HandOverRequest;
}

export namespace HandOverRequest {
  export type AsObject = {
    crnti: string,
    srcstation?: ECGI.AsObject,
    dststation?: ECGI.AsObject,
  }
}

export class HandOverResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HandOverResponse.AsObject;
  static toObject(includeInstance: boolean, msg: HandOverResponse): HandOverResponse.AsObject;
  static serializeBinaryToWriter(message: HandOverResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HandOverResponse;
  static deserializeBinaryFromReader(message: HandOverResponse, reader: jspb.BinaryReader): HandOverResponse;
}

export namespace HandOverResponse {
  export type AsObject = {
    success: boolean,
  }
}

export class RadioPowerRequest extends jspb.Message {
  getEcgi(): ECGI | undefined;
  setEcgi(value?: ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getOffset(): StationPowerOffset;
  setOffset(value: StationPowerOffset): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RadioPowerRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RadioPowerRequest): RadioPowerRequest.AsObject;
  static serializeBinaryToWriter(message: RadioPowerRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RadioPowerRequest;
  static deserializeBinaryFromReader(message: RadioPowerRequest, reader: jspb.BinaryReader): RadioPowerRequest;
}

export namespace RadioPowerRequest {
  export type AsObject = {
    ecgi?: ECGI.AsObject,
    offset: StationPowerOffset,
  }
}

export class RadioPowerResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RadioPowerResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RadioPowerResponse): RadioPowerResponse.AsObject;
  static serializeBinaryToWriter(message: RadioPowerResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RadioPowerResponse;
  static deserializeBinaryFromReader(message: RadioPowerResponse, reader: jspb.BinaryReader): RadioPowerResponse;
}

export namespace RadioPowerResponse {
  export type AsObject = {
    success: boolean,
  }
}

export class C1RequestMessage extends jspb.Message {
  getHeader(): C1RequestMessageHeader | undefined;
  setHeader(value?: C1RequestMessageHeader): void;
  hasHeader(): boolean;
  clearHeader(): void;

  getPayload(): C1RequestMessagePayload | undefined;
  setPayload(value?: C1RequestMessagePayload): void;
  hasPayload(): boolean;
  clearPayload(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RequestMessage.AsObject;
  static toObject(includeInstance: boolean, msg: C1RequestMessage): C1RequestMessage.AsObject;
  static serializeBinaryToWriter(message: C1RequestMessage, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RequestMessage;
  static deserializeBinaryFromReader(message: C1RequestMessage, reader: jspb.BinaryReader): C1RequestMessage;
}

export namespace C1RequestMessage {
  export type AsObject = {
    header?: C1RequestMessageHeader.AsObject,
    payload?: C1RequestMessagePayload.AsObject,
  }
}

export class C1ResponseMessage extends jspb.Message {
  getHeader(): C1ResponseMessageHeader | undefined;
  setHeader(value?: C1ResponseMessageHeader): void;
  hasHeader(): boolean;
  clearHeader(): void;

  getPayload(): C1ResponseMessagePayload | undefined;
  setPayload(value?: C1ResponseMessagePayload): void;
  hasPayload(): boolean;
  clearPayload(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1ResponseMessage.AsObject;
  static toObject(includeInstance: boolean, msg: C1ResponseMessage): C1ResponseMessage.AsObject;
  static serializeBinaryToWriter(message: C1ResponseMessage, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1ResponseMessage;
  static deserializeBinaryFromReader(message: C1ResponseMessage, reader: jspb.BinaryReader): C1ResponseMessage;
}

export namespace C1ResponseMessage {
  export type AsObject = {
    header?: C1ResponseMessageHeader.AsObject,
    payload?: C1ResponseMessagePayload.AsObject,
  }
}

export class C1RequestMessageHeader extends jspb.Message {
  getType(): C1MessageType;
  setType(value: C1MessageType): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RequestMessageHeader.AsObject;
  static toObject(includeInstance: boolean, msg: C1RequestMessageHeader): C1RequestMessageHeader.AsObject;
  static serializeBinaryToWriter(message: C1RequestMessageHeader, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RequestMessageHeader;
  static deserializeBinaryFromReader(message: C1RequestMessageHeader, reader: jspb.BinaryReader): C1RequestMessageHeader;
}

export namespace C1RequestMessageHeader {
  export type AsObject = {
    type: C1MessageType,
  }
}

export class C1RequestMessagePayload extends jspb.Message {
  getRequestedrnibtype(): C1RNIBType;
  setRequestedrnibtype(value: C1RNIBType): void;

  getHandoverrequest(): C1HandoverRequest | undefined;
  setHandoverrequest(value?: C1HandoverRequest): void;
  hasHandoverrequest(): boolean;
  clearHandoverrequest(): void;

  getRrmconfigurationrequest(): C1RRMConfiguration | undefined;
  setRrmconfigurationrequest(value?: C1RRMConfiguration): void;
  hasRrmconfigurationrequest(): boolean;
  clearRrmconfigurationrequest(): void;

  getRequestCase(): C1RequestMessagePayload.RequestCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RequestMessagePayload.AsObject;
  static toObject(includeInstance: boolean, msg: C1RequestMessagePayload): C1RequestMessagePayload.AsObject;
  static serializeBinaryToWriter(message: C1RequestMessagePayload, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RequestMessagePayload;
  static deserializeBinaryFromReader(message: C1RequestMessagePayload, reader: jspb.BinaryReader): C1RequestMessagePayload;
}

export namespace C1RequestMessagePayload {
  export type AsObject = {
    requestedrnibtype: C1RNIBType,
    handoverrequest?: C1HandoverRequest.AsObject,
    rrmconfigurationrequest?: C1RRMConfiguration.AsObject,
  }

  export enum RequestCase { 
    REQUEST_NOT_SET = 0,
    REQUESTEDRNIBTYPE = 1,
    HANDOVERREQUEST = 2,
    RRMCONFIGURATIONREQUEST = 3,
  }
}

export class C1ResponseMessageHeader extends jspb.Message {
  getType(): C1MessageType;
  setType(value: C1MessageType): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1ResponseMessageHeader.AsObject;
  static toObject(includeInstance: boolean, msg: C1ResponseMessageHeader): C1ResponseMessageHeader.AsObject;
  static serializeBinaryToWriter(message: C1ResponseMessageHeader, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1ResponseMessageHeader;
  static deserializeBinaryFromReader(message: C1ResponseMessageHeader, reader: jspb.BinaryReader): C1ResponseMessageHeader;
}

export namespace C1ResponseMessageHeader {
  export type AsObject = {
    type: C1MessageType,
  }
}

export class C1ResponseMessagePayload extends jspb.Message {
  getResponsecode(): string;
  setResponsecode(value: string): void;

  getRnibcells(): C1RNIBCells | undefined;
  setRnibcells(value?: C1RNIBCells): void;
  hasRnibcells(): boolean;
  clearRnibcells(): void;

  getRnibues(): C1RNIBUEs | undefined;
  setRnibues(value?: C1RNIBUEs): void;
  hasRnibues(): boolean;
  clearRnibues(): void;

  getRniblinks(): C1RNIBLinks | undefined;
  setRniblinks(value?: C1RNIBLinks): void;
  hasRniblinks(): boolean;
  clearRniblinks(): void;

  getResultCase(): C1ResponseMessagePayload.ResultCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1ResponseMessagePayload.AsObject;
  static toObject(includeInstance: boolean, msg: C1ResponseMessagePayload): C1ResponseMessagePayload.AsObject;
  static serializeBinaryToWriter(message: C1ResponseMessagePayload, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1ResponseMessagePayload;
  static deserializeBinaryFromReader(message: C1ResponseMessagePayload, reader: jspb.BinaryReader): C1ResponseMessagePayload;
}

export namespace C1ResponseMessagePayload {
  export type AsObject = {
    responsecode: string,
    rnibcells?: C1RNIBCells.AsObject,
    rnibues?: C1RNIBUEs.AsObject,
    rniblinks?: C1RNIBLinks.AsObject,
  }

  export enum ResultCase { 
    RESULT_NOT_SET = 0,
    RESPONSECODE = 1,
    RNIBCELLS = 2,
    RNIBUES = 3,
    RNIBLINKS = 4,
  }
}

export class C1RNIBCells extends jspb.Message {
  getRnibcellsList(): Array<C1RNIBCell>;
  setRnibcellsList(value: Array<C1RNIBCell>): void;
  clearRnibcellsList(): void;
  addRnibcells(value?: C1RNIBCell, index?: number): C1RNIBCell;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RNIBCells.AsObject;
  static toObject(includeInstance: boolean, msg: C1RNIBCells): C1RNIBCells.AsObject;
  static serializeBinaryToWriter(message: C1RNIBCells, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RNIBCells;
  static deserializeBinaryFromReader(message: C1RNIBCells, reader: jspb.BinaryReader): C1RNIBCells;
}

export namespace C1RNIBCells {
  export type AsObject = {
    rnibcellsList: Array<C1RNIBCell.AsObject>,
  }
}

export class C1RNIBUEs extends jspb.Message {
  getRnibuesList(): Array<C1RNIBUE>;
  setRnibuesList(value: Array<C1RNIBUE>): void;
  clearRnibuesList(): void;
  addRnibues(value?: C1RNIBUE, index?: number): C1RNIBUE;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RNIBUEs.AsObject;
  static toObject(includeInstance: boolean, msg: C1RNIBUEs): C1RNIBUEs.AsObject;
  static serializeBinaryToWriter(message: C1RNIBUEs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RNIBUEs;
  static deserializeBinaryFromReader(message: C1RNIBUEs, reader: jspb.BinaryReader): C1RNIBUEs;
}

export namespace C1RNIBUEs {
  export type AsObject = {
    rnibuesList: Array<C1RNIBUE.AsObject>,
  }
}

export class C1RNIBLinks extends jspb.Message {
  getRniblinksList(): Array<C1RNIBLink>;
  setRniblinksList(value: Array<C1RNIBLink>): void;
  clearRniblinksList(): void;
  addRniblinks(value?: C1RNIBLink, index?: number): C1RNIBLink;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RNIBLinks.AsObject;
  static toObject(includeInstance: boolean, msg: C1RNIBLinks): C1RNIBLinks.AsObject;
  static serializeBinaryToWriter(message: C1RNIBLinks, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RNIBLinks;
  static deserializeBinaryFromReader(message: C1RNIBLinks, reader: jspb.BinaryReader): C1RNIBLinks;
}

export namespace C1RNIBLinks {
  export type AsObject = {
    rniblinksList: Array<C1RNIBLink.AsObject>,
  }
}

export class C1ECGI extends jspb.Message {
  getPlmnid(): string;
  setPlmnid(value: string): void;

  getEcid(): string;
  setEcid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1ECGI.AsObject;
  static toObject(includeInstance: boolean, msg: C1ECGI): C1ECGI.AsObject;
  static serializeBinaryToWriter(message: C1ECGI, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1ECGI;
  static deserializeBinaryFromReader(message: C1ECGI, reader: jspb.BinaryReader): C1ECGI;
}

export namespace C1ECGI {
  export type AsObject = {
    plmnid: string,
    ecid: string,
  }
}

export class C1CandScell extends jspb.Message {
  getPci(): string;
  setPci(value: string): void;

  getEarfcndl(): string;
  setEarfcndl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1CandScell.AsObject;
  static toObject(includeInstance: boolean, msg: C1CandScell): C1CandScell.AsObject;
  static serializeBinaryToWriter(message: C1CandScell, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1CandScell;
  static deserializeBinaryFromReader(message: C1CandScell, reader: jspb.BinaryReader): C1CandScell;
}

export namespace C1CandScell {
  export type AsObject = {
    pci: string,
    earfcndl: string,
  }
}

export class C1RNIBCell extends jspb.Message {
  getEcgi(): C1ECGI | undefined;
  setEcgi(value?: C1ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getCellconfiguration(): C1CellConfigAttribute | undefined;
  setCellconfiguration(value?: C1CellConfigAttribute): void;
  hasCellconfiguration(): boolean;
  clearCellconfiguration(): void;

  getRrmconfiguration(): C1RRMConfigAttribute | undefined;
  setRrmconfiguration(value?: C1RRMConfigAttribute): void;
  hasRrmconfiguration(): boolean;
  clearRrmconfiguration(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RNIBCell.AsObject;
  static toObject(includeInstance: boolean, msg: C1RNIBCell): C1RNIBCell.AsObject;
  static serializeBinaryToWriter(message: C1RNIBCell, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RNIBCell;
  static deserializeBinaryFromReader(message: C1RNIBCell, reader: jspb.BinaryReader): C1RNIBCell;
}

export namespace C1RNIBCell {
  export type AsObject = {
    ecgi?: C1ECGI.AsObject,
    cellconfiguration?: C1CellConfigAttribute.AsObject,
    rrmconfiguration?: C1RRMConfigAttribute.AsObject,
  }
}

export class C1CellConfigAttribute extends jspb.Message {
  getEcgi(): C1ECGI | undefined;
  setEcgi(value?: C1ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getPci(): string;
  setPci(value: string): void;

  getCandscellsList(): Array<C1CandScell>;
  setCandscellsList(value: Array<C1CandScell>): void;
  clearCandscellsList(): void;
  addCandscells(value?: C1CandScell, index?: number): C1CandScell;

  getEarfcndl(): string;
  setEarfcndl(value: string): void;

  getEarfcnul(): string;
  setEarfcnul(value: string): void;

  getRbsperttidl(): string;
  setRbsperttidl(value: string): void;

  getRbsperttiul(): string;
  setRbsperttiul(value: string): void;

  getNumtxantenna(): string;
  setNumtxantenna(value: string): void;

  getDuplexmode(): string;
  setDuplexmode(value: string): void;

  getMaxnumconnectedues(): string;
  setMaxnumconnectedues(value: string): void;

  getMaxnumconnectedbearers(): string;
  setMaxnumconnectedbearers(value: string): void;

  getMaxnumuesschedperttidl(): string;
  setMaxnumuesschedperttidl(value: string): void;

  getMaxnumuesschedperttiul(): string;
  setMaxnumuesschedperttiul(value: string): void;

  getDlfsschedenable(): string;
  setDlfsschedenable(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1CellConfigAttribute.AsObject;
  static toObject(includeInstance: boolean, msg: C1CellConfigAttribute): C1CellConfigAttribute.AsObject;
  static serializeBinaryToWriter(message: C1CellConfigAttribute, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1CellConfigAttribute;
  static deserializeBinaryFromReader(message: C1CellConfigAttribute, reader: jspb.BinaryReader): C1CellConfigAttribute;
}

export namespace C1CellConfigAttribute {
  export type AsObject = {
    ecgi?: C1ECGI.AsObject,
    pci: string,
    candscellsList: Array<C1CandScell.AsObject>,
    earfcndl: string,
    earfcnul: string,
    rbsperttidl: string,
    rbsperttiul: string,
    numtxantenna: string,
    duplexmode: string,
    maxnumconnectedues: string,
    maxnumconnectedbearers: string,
    maxnumuesschedperttidl: string,
    maxnumuesschedperttiul: string,
    dlfsschedenable: string,
  }
}

export class C1PciArfcn extends jspb.Message {
  getPci(): string;
  setPci(value: string): void;

  getEarfcndl(): string;
  setEarfcndl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1PciArfcn.AsObject;
  static toObject(includeInstance: boolean, msg: C1PciArfcn): C1PciArfcn.AsObject;
  static serializeBinaryToWriter(message: C1PciArfcn, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1PciArfcn;
  static deserializeBinaryFromReader(message: C1PciArfcn, reader: jspb.BinaryReader): C1PciArfcn;
}

export namespace C1PciArfcn {
  export type AsObject = {
    pci: string,
    earfcndl: string,
  }
}

export class C1RRMConfigAttribute extends jspb.Message {
  getEcgi(): C1ECGI | undefined;
  setEcgi(value?: C1ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getCrntiList(): Array<string>;
  setCrntiList(value: Array<string>): void;
  clearCrntiList(): void;
  addCrnti(value: string, index?: number): void;

  getPciarfcn(): C1PciArfcn | undefined;
  setPciarfcn(value?: C1PciArfcn): void;
  hasPciarfcn(): boolean;
  clearPciarfcn(): void;

  getPaList(): Array<C1XICICPA>;
  setPaList(value: Array<C1XICICPA>): void;
  clearPaList(): void;
  addPa(value: C1XICICPA, index?: number): void;

  getStartprbdlList(): Array<string>;
  setStartprbdlList(value: Array<string>): void;
  clearStartprbdlList(): void;
  addStartprbdl(value: string, index?: number): void;

  getEndprbdlList(): Array<string>;
  setEndprbdlList(value: Array<string>): void;
  clearEndprbdlList(): void;
  addEndprbdl(value: string, index?: number): void;

  getSubframebitmaskdlList(): Array<string>;
  setSubframebitmaskdlList(value: Array<string>): void;
  clearSubframebitmaskdlList(): void;
  addSubframebitmaskdl(value: string, index?: number): void;

  getP0uepuschList(): Array<string>;
  setP0uepuschList(value: Array<string>): void;
  clearP0uepuschList(): void;
  addP0uepusch(value: string, index?: number): void;

  getStartprbulList(): Array<string>;
  setStartprbulList(value: Array<string>): void;
  clearStartprbulList(): void;
  addStartprbul(value: string, index?: number): void;

  getEndprbulList(): Array<string>;
  setEndprbulList(value: Array<string>): void;
  clearEndprbulList(): void;
  addEndprbul(value: string, index?: number): void;

  getSubframebitmaskulList(): Array<string>;
  setSubframebitmaskulList(value: Array<string>): void;
  clearSubframebitmaskulList(): void;
  addSubframebitmaskul(value: string, index?: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RRMConfigAttribute.AsObject;
  static toObject(includeInstance: boolean, msg: C1RRMConfigAttribute): C1RRMConfigAttribute.AsObject;
  static serializeBinaryToWriter(message: C1RRMConfigAttribute, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RRMConfigAttribute;
  static deserializeBinaryFromReader(message: C1RRMConfigAttribute, reader: jspb.BinaryReader): C1RRMConfigAttribute;
}

export namespace C1RRMConfigAttribute {
  export type AsObject = {
    ecgi?: C1ECGI.AsObject,
    crntiList: Array<string>,
    pciarfcn?: C1PciArfcn.AsObject,
    paList: Array<C1XICICPA>,
    startprbdlList: Array<string>,
    endprbdlList: Array<string>,
    subframebitmaskdlList: Array<string>,
    p0uepuschList: Array<string>,
    startprbulList: Array<string>,
    endprbulList: Array<string>,
    subframebitmaskulList: Array<string>,
  }
}

export class C1RNIBUE extends jspb.Message {
  getImsi(): string;
  setImsi(value: string): void;

  getCrnti(): string;
  setCrnti(value: string): void;

  getScell(): C1ECGI | undefined;
  setScell(value?: C1ECGI): void;
  hasScell(): boolean;
  clearScell(): void;

  getMmeues1apid(): string;
  setMmeues1apid(value: string): void;

  getEnbues1apid(): string;
  setEnbues1apid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RNIBUE.AsObject;
  static toObject(includeInstance: boolean, msg: C1RNIBUE): C1RNIBUE.AsObject;
  static serializeBinaryToWriter(message: C1RNIBUE, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RNIBUE;
  static deserializeBinaryFromReader(message: C1RNIBUE, reader: jspb.BinaryReader): C1RNIBUE;
}

export namespace C1RNIBUE {
  export type AsObject = {
    imsi: string,
    crnti: string,
    scell?: C1ECGI.AsObject,
    mmeues1apid: string,
    enbues1apid: string,
  }
}

export class C1RNIBLinkID extends jspb.Message {
  getEcgi(): C1ECGI | undefined;
  setEcgi(value?: C1ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getImsi(): string;
  setImsi(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RNIBLinkID.AsObject;
  static toObject(includeInstance: boolean, msg: C1RNIBLinkID): C1RNIBLinkID.AsObject;
  static serializeBinaryToWriter(message: C1RNIBLinkID, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RNIBLinkID;
  static deserializeBinaryFromReader(message: C1RNIBLinkID, reader: jspb.BinaryReader): C1RNIBLinkID;
}

export namespace C1RNIBLinkID {
  export type AsObject = {
    ecgi?: C1ECGI.AsObject,
    imsi: string,
  }
}

export class C1RadioRepPerServCellAttribute extends jspb.Message {
  getEcgi(): C1ECGI | undefined;
  setEcgi(value?: C1ECGI): void;
  hasEcgi(): boolean;
  clearEcgi(): void;

  getCqihistList(): Array<string>;
  setCqihistList(value: Array<string>): void;
  clearCqihistList(): void;
  addCqihist(value: string, index?: number): void;

  getRihistList(): Array<string>;
  setRihistList(value: Array<string>): void;
  clearRihistList(): void;
  addRihist(value: string, index?: number): void;

  getPuschsinrhistList(): Array<string>;
  setPuschsinrhistList(value: Array<string>): void;
  clearPuschsinrhistList(): void;
  addPuschsinrhist(value: string, index?: number): void;

  getPucchsinrhistList(): Array<string>;
  setPucchsinrhistList(value: Array<string>): void;
  clearPucchsinrhistList(): void;
  addPucchsinrhist(value: string, index?: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RadioRepPerServCellAttribute.AsObject;
  static toObject(includeInstance: boolean, msg: C1RadioRepPerServCellAttribute): C1RadioRepPerServCellAttribute.AsObject;
  static serializeBinaryToWriter(message: C1RadioRepPerServCellAttribute, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RadioRepPerServCellAttribute;
  static deserializeBinaryFromReader(message: C1RadioRepPerServCellAttribute, reader: jspb.BinaryReader): C1RadioRepPerServCellAttribute;
}

export namespace C1RadioRepPerServCellAttribute {
  export type AsObject = {
    ecgi?: C1ECGI.AsObject,
    cqihistList: Array<string>,
    rihistList: Array<string>,
    puschsinrhistList: Array<string>,
    pucchsinrhistList: Array<string>,
  }
}

export class C1RadioMeasReportPerUeAttribute extends jspb.Message {
  getRadiorepperservcellList(): Array<C1RadioRepPerServCellAttribute>;
  setRadiorepperservcellList(value: Array<C1RadioRepPerServCellAttribute>): void;
  clearRadiorepperservcellList(): void;
  addRadiorepperservcell(value?: C1RadioRepPerServCellAttribute, index?: number): C1RadioRepPerServCellAttribute;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RadioMeasReportPerUeAttribute.AsObject;
  static toObject(includeInstance: boolean, msg: C1RadioMeasReportPerUeAttribute): C1RadioMeasReportPerUeAttribute.AsObject;
  static serializeBinaryToWriter(message: C1RadioMeasReportPerUeAttribute, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RadioMeasReportPerUeAttribute;
  static deserializeBinaryFromReader(message: C1RadioMeasReportPerUeAttribute, reader: jspb.BinaryReader): C1RadioMeasReportPerUeAttribute;
}

export namespace C1RadioMeasReportPerUeAttribute {
  export type AsObject = {
    radiorepperservcellList: Array<C1RadioRepPerServCellAttribute.AsObject>,
  }
}

export class C1RNIBLink extends jspb.Message {
  getLinkid(): C1RNIBLinkID | undefined;
  setLinkid(value?: C1RNIBLinkID): void;
  hasLinkid(): boolean;
  clearLinkid(): void;

  getRadiomeasreportperue(): C1RadioMeasReportPerUeAttribute | undefined;
  setRadiomeasreportperue(value?: C1RadioMeasReportPerUeAttribute): void;
  hasRadiomeasreportperue(): boolean;
  clearRadiomeasreportperue(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RNIBLink.AsObject;
  static toObject(includeInstance: boolean, msg: C1RNIBLink): C1RNIBLink.AsObject;
  static serializeBinaryToWriter(message: C1RNIBLink, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RNIBLink;
  static deserializeBinaryFromReader(message: C1RNIBLink, reader: jspb.BinaryReader): C1RNIBLink;
}

export namespace C1RNIBLink {
  export type AsObject = {
    linkid?: C1RNIBLinkID.AsObject,
    radiomeasreportperue?: C1RadioMeasReportPerUeAttribute.AsObject,
  }
}

export class C1HandoverRequest extends jspb.Message {
  getLinks(): C1RNIBLinks | undefined;
  setLinks(value?: C1RNIBLinks): void;
  hasLinks(): boolean;
  clearLinks(): void;

  getSrccells(): C1RNIBCells | undefined;
  setSrccells(value?: C1RNIBCells): void;
  hasSrccells(): boolean;
  clearSrccells(): void;

  getDstcells(): C1RNIBCells | undefined;
  setDstcells(value?: C1RNIBCells): void;
  hasDstcells(): boolean;
  clearDstcells(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1HandoverRequest.AsObject;
  static toObject(includeInstance: boolean, msg: C1HandoverRequest): C1HandoverRequest.AsObject;
  static serializeBinaryToWriter(message: C1HandoverRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1HandoverRequest;
  static deserializeBinaryFromReader(message: C1HandoverRequest, reader: jspb.BinaryReader): C1HandoverRequest;
}

export namespace C1HandoverRequest {
  export type AsObject = {
    links?: C1RNIBLinks.AsObject,
    srccells?: C1RNIBCells.AsObject,
    dstcells?: C1RNIBCells.AsObject,
  }
}

export class C1RRMConfiguration extends jspb.Message {
  getTargetcells(): C1RNIBCells | undefined;
  setTargetcells(value?: C1RNIBCells): void;
  hasTargetcells(): boolean;
  clearTargetcells(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): C1RRMConfiguration.AsObject;
  static toObject(includeInstance: boolean, msg: C1RRMConfiguration): C1RRMConfiguration.AsObject;
  static serializeBinaryToWriter(message: C1RRMConfiguration, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): C1RRMConfiguration;
  static deserializeBinaryFromReader(message: C1RRMConfiguration, reader: jspb.BinaryReader): C1RRMConfiguration;
}

export namespace C1RRMConfiguration {
  export type AsObject = {
    targetcells?: C1RNIBCells.AsObject,
  }
}

export enum StationPowerOffset { 
  PA_DB_MINUS6 = 0,
  PA_DB_MINUX4DOT77 = 1,
  PA_DB_MINUS3 = 2,
  PA_DB_MINUS1DOT77 = 3,
  PA_DB_0 = 4,
  PA_DB_1 = 5,
  PA_DB_2 = 6,
  PA_DB_3 = 7,
}
export enum UEInfoType { 
  MESSAGE_TYPE_UPDATE_UE = 0,
  MESSAGE_TYPE_DELETE_UE = 1,
}
export enum C1MessageType { 
  C1_MESSAGE_UNKNOWN = 0,
  C1_GET_RNIBCELLS = 1,
  C1_GET_RNIBUES = 2,
  C1_GET_RNIBLINKS = 3,
  C1_POST_HANDOVERS = 4,
  C1_POST_RMMCONFIGURATION = 5,
}
export enum C1RNIBType { 
  C1_RNIB_UNKNOWN = 0,
  C1_RNIB_CELL = 1,
  C1_RNIB_UE = 2,
  C1_RNIB_LINK = 3,
}
export enum C1XICICPA { 
  C1_XICIC_PA_DB_MINUS6 = 0,
  C1_XICIC_PA_DB_MINUX4DOT77 = 1,
  C1_XICIC_PA_DB_MINUS3 = 2,
  C1_XICIC_PA_DB_MINUS1DOT77 = 3,
  C1_XICIC_PA_DB_0 = 4,
  C1_XICIC_PA_DB_1 = 5,
  C1_XICIC_PA_DB_2 = 6,
  C1_XICIC_PA_DB_3 = 7,
}
