// source: github.com/onosproject/onos-ric/api/nb/c1-interface.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.interface.c1.C1CandScell', null, global);
goog.exportSymbol('proto.interface.c1.C1CellConfigAttribute', null, global);
goog.exportSymbol('proto.interface.c1.C1ECGI', null, global);
goog.exportSymbol('proto.interface.c1.C1HandoverRequest', null, global);
goog.exportSymbol('proto.interface.c1.C1MessageType', null, global);
goog.exportSymbol('proto.interface.c1.C1PciArfcn', null, global);
goog.exportSymbol('proto.interface.c1.C1RNIBCell', null, global);
goog.exportSymbol('proto.interface.c1.C1RNIBCells', null, global);
goog.exportSymbol('proto.interface.c1.C1RNIBLink', null, global);
goog.exportSymbol('proto.interface.c1.C1RNIBLinkID', null, global);
goog.exportSymbol('proto.interface.c1.C1RNIBLinks', null, global);
goog.exportSymbol('proto.interface.c1.C1RNIBType', null, global);
goog.exportSymbol('proto.interface.c1.C1RNIBUE', null, global);
goog.exportSymbol('proto.interface.c1.C1RNIBUEs', null, global);
goog.exportSymbol('proto.interface.c1.C1RRMConfigAttribute', null, global);
goog.exportSymbol('proto.interface.c1.C1RRMConfiguration', null, global);
goog.exportSymbol('proto.interface.c1.C1RadioMeasReportPerUeAttribute', null, global);
goog.exportSymbol('proto.interface.c1.C1RadioRepPerServCellAttribute', null, global);
goog.exportSymbol('proto.interface.c1.C1RequestMessage', null, global);
goog.exportSymbol('proto.interface.c1.C1RequestMessageHeader', null, global);
goog.exportSymbol('proto.interface.c1.C1RequestMessagePayload', null, global);
goog.exportSymbol('proto.interface.c1.C1RequestMessagePayload.RequestCase', null, global);
goog.exportSymbol('proto.interface.c1.C1ResponseMessage', null, global);
goog.exportSymbol('proto.interface.c1.C1ResponseMessageHeader', null, global);
goog.exportSymbol('proto.interface.c1.C1ResponseMessagePayload', null, global);
goog.exportSymbol('proto.interface.c1.C1ResponseMessagePayload.ResultCase', null, global);
goog.exportSymbol('proto.interface.c1.C1XICICPA', null, global);
goog.exportSymbol('proto.interface.c1.ChannelQuality', null, global);
goog.exportSymbol('proto.interface.c1.ECGI', null, global);
goog.exportSymbol('proto.interface.c1.HandOverRequest', null, global);
goog.exportSymbol('proto.interface.c1.HandOverResponse', null, global);
goog.exportSymbol('proto.interface.c1.RadioPowerRequest', null, global);
goog.exportSymbol('proto.interface.c1.RadioPowerResponse', null, global);
goog.exportSymbol('proto.interface.c1.StationInfo', null, global);
goog.exportSymbol('proto.interface.c1.StationLinkInfo', null, global);
goog.exportSymbol('proto.interface.c1.StationLinkListRequest', null, global);
goog.exportSymbol('proto.interface.c1.StationListRequest', null, global);
goog.exportSymbol('proto.interface.c1.StationPowerOffset', null, global);
goog.exportSymbol('proto.interface.c1.UEInfo', null, global);
goog.exportSymbol('proto.interface.c1.UEInfoType', null, global);
goog.exportSymbol('proto.interface.c1.UELinkInfo', null, global);
goog.exportSymbol('proto.interface.c1.UELinkListRequest', null, global);
goog.exportSymbol('proto.interface.c1.UEListRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.ECGI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.ECGI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.ECGI.displayName = 'proto.interface.c1.ECGI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.StationListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.StationListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.StationListRequest.displayName = 'proto.interface.c1.StationListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.StationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.StationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.StationInfo.displayName = 'proto.interface.c1.StationInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.StationLinkListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.StationLinkListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.StationLinkListRequest.displayName = 'proto.interface.c1.StationLinkListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.StationLinkInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interface.c1.StationLinkInfo.repeatedFields_, null);
};
goog.inherits(proto.interface.c1.StationLinkInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.StationLinkInfo.displayName = 'proto.interface.c1.StationLinkInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.UEListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.UEListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.UEListRequest.displayName = 'proto.interface.c1.UEListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.UEInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.UEInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.UEInfo.displayName = 'proto.interface.c1.UEInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.UELinkListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.UELinkListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.UELinkListRequest.displayName = 'proto.interface.c1.UELinkListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.ChannelQuality = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.ChannelQuality, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.ChannelQuality.displayName = 'proto.interface.c1.ChannelQuality';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.UELinkInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interface.c1.UELinkInfo.repeatedFields_, null);
};
goog.inherits(proto.interface.c1.UELinkInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.UELinkInfo.displayName = 'proto.interface.c1.UELinkInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.HandOverRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.HandOverRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.HandOverRequest.displayName = 'proto.interface.c1.HandOverRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.HandOverResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.HandOverResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.HandOverResponse.displayName = 'proto.interface.c1.HandOverResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.RadioPowerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.RadioPowerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.RadioPowerRequest.displayName = 'proto.interface.c1.RadioPowerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.RadioPowerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.RadioPowerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.RadioPowerResponse.displayName = 'proto.interface.c1.RadioPowerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1RequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RequestMessage.displayName = 'proto.interface.c1.C1RequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1ResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1ResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1ResponseMessage.displayName = 'proto.interface.c1.C1ResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RequestMessageHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1RequestMessageHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RequestMessageHeader.displayName = 'proto.interface.c1.C1RequestMessageHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RequestMessagePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.interface.c1.C1RequestMessagePayload.oneofGroups_);
};
goog.inherits(proto.interface.c1.C1RequestMessagePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RequestMessagePayload.displayName = 'proto.interface.c1.C1RequestMessagePayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1ResponseMessageHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1ResponseMessageHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1ResponseMessageHeader.displayName = 'proto.interface.c1.C1ResponseMessageHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1ResponseMessagePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.interface.c1.C1ResponseMessagePayload.oneofGroups_);
};
goog.inherits(proto.interface.c1.C1ResponseMessagePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1ResponseMessagePayload.displayName = 'proto.interface.c1.C1ResponseMessagePayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RNIBCells = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interface.c1.C1RNIBCells.repeatedFields_, null);
};
goog.inherits(proto.interface.c1.C1RNIBCells, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RNIBCells.displayName = 'proto.interface.c1.C1RNIBCells';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RNIBUEs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interface.c1.C1RNIBUEs.repeatedFields_, null);
};
goog.inherits(proto.interface.c1.C1RNIBUEs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RNIBUEs.displayName = 'proto.interface.c1.C1RNIBUEs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RNIBLinks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interface.c1.C1RNIBLinks.repeatedFields_, null);
};
goog.inherits(proto.interface.c1.C1RNIBLinks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RNIBLinks.displayName = 'proto.interface.c1.C1RNIBLinks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1ECGI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1ECGI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1ECGI.displayName = 'proto.interface.c1.C1ECGI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1CandScell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1CandScell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1CandScell.displayName = 'proto.interface.c1.C1CandScell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RNIBCell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1RNIBCell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RNIBCell.displayName = 'proto.interface.c1.C1RNIBCell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1CellConfigAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interface.c1.C1CellConfigAttribute.repeatedFields_, null);
};
goog.inherits(proto.interface.c1.C1CellConfigAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1CellConfigAttribute.displayName = 'proto.interface.c1.C1CellConfigAttribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1PciArfcn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1PciArfcn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1PciArfcn.displayName = 'proto.interface.c1.C1PciArfcn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RRMConfigAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interface.c1.C1RRMConfigAttribute.repeatedFields_, null);
};
goog.inherits(proto.interface.c1.C1RRMConfigAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RRMConfigAttribute.displayName = 'proto.interface.c1.C1RRMConfigAttribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RNIBUE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1RNIBUE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RNIBUE.displayName = 'proto.interface.c1.C1RNIBUE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RNIBLinkID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1RNIBLinkID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RNIBLinkID.displayName = 'proto.interface.c1.C1RNIBLinkID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RadioRepPerServCellAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interface.c1.C1RadioRepPerServCellAttribute.repeatedFields_, null);
};
goog.inherits(proto.interface.c1.C1RadioRepPerServCellAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RadioRepPerServCellAttribute.displayName = 'proto.interface.c1.C1RadioRepPerServCellAttribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interface.c1.C1RadioMeasReportPerUeAttribute.repeatedFields_, null);
};
goog.inherits(proto.interface.c1.C1RadioMeasReportPerUeAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RadioMeasReportPerUeAttribute.displayName = 'proto.interface.c1.C1RadioMeasReportPerUeAttribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RNIBLink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1RNIBLink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RNIBLink.displayName = 'proto.interface.c1.C1RNIBLink';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1HandoverRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1HandoverRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1HandoverRequest.displayName = 'proto.interface.c1.C1HandoverRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interface.c1.C1RRMConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interface.c1.C1RRMConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interface.c1.C1RRMConfiguration.displayName = 'proto.interface.c1.C1RRMConfiguration';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.ECGI.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.ECGI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.ECGI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.ECGI.toObject = function(includeInstance, msg) {
  var f, obj = {
    plmnid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ecid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.ECGI}
 */
proto.interface.c1.ECGI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.ECGI;
  return proto.interface.c1.ECGI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.ECGI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.ECGI}
 */
proto.interface.c1.ECGI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlmnid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEcid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.ECGI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.ECGI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.ECGI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.ECGI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlmnid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEcid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string plmnid = 1;
 * @return {string}
 */
proto.interface.c1.ECGI.prototype.getPlmnid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.ECGI} returns this
 */
proto.interface.c1.ECGI.prototype.setPlmnid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ecid = 2;
 * @return {string}
 */
proto.interface.c1.ECGI.prototype.getEcid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.ECGI} returns this
 */
proto.interface.c1.ECGI.prototype.setEcid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.StationListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.StationListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.StationListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.StationListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    subscribe: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    noreplay: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.StationListRequest}
 */
proto.interface.c1.StationListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.StationListRequest;
  return proto.interface.c1.StationListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.StationListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.StationListRequest}
 */
proto.interface.c1.StationListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribe(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoreplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.StationListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.StationListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.StationListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.StationListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getSubscribe();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getNoreplay();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional ECGI ecgi = 1;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.StationListRequest.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 1));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.StationListRequest} returns this
*/
proto.interface.c1.StationListRequest.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.StationListRequest} returns this
 */
proto.interface.c1.StationListRequest.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.StationListRequest.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool subscribe = 2;
 * @return {boolean}
 */
proto.interface.c1.StationListRequest.prototype.getSubscribe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.StationListRequest} returns this
 */
proto.interface.c1.StationListRequest.prototype.setSubscribe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool noReplay = 3;
 * @return {boolean}
 */
proto.interface.c1.StationListRequest.prototype.getNoreplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.StationListRequest} returns this
 */
proto.interface.c1.StationListRequest.prototype.setNoreplay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.StationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.StationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.StationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.StationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    maxnumconnectedues: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.StationInfo}
 */
proto.interface.c1.StationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.StationInfo;
  return proto.interface.c1.StationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.StationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.StationInfo}
 */
proto.interface.c1.StationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxnumconnectedues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.StationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.StationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.StationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.StationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getMaxnumconnectedues();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional ECGI ecgi = 1;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.StationInfo.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 1));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.StationInfo} returns this
*/
proto.interface.c1.StationInfo.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.StationInfo} returns this
 */
proto.interface.c1.StationInfo.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.StationInfo.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 maxNumConnectedUes = 2;
 * @return {number}
 */
proto.interface.c1.StationInfo.prototype.getMaxnumconnectedues = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.interface.c1.StationInfo} returns this
 */
proto.interface.c1.StationInfo.prototype.setMaxnumconnectedues = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.StationLinkListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.StationLinkListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.StationLinkListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.StationLinkListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    subscribe: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    noreplay: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.StationLinkListRequest}
 */
proto.interface.c1.StationLinkListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.StationLinkListRequest;
  return proto.interface.c1.StationLinkListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.StationLinkListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.StationLinkListRequest}
 */
proto.interface.c1.StationLinkListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribe(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoreplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.StationLinkListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.StationLinkListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.StationLinkListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.StationLinkListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getSubscribe();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getNoreplay();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional ECGI ecgi = 1;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.StationLinkListRequest.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 1));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.StationLinkListRequest} returns this
*/
proto.interface.c1.StationLinkListRequest.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.StationLinkListRequest} returns this
 */
proto.interface.c1.StationLinkListRequest.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.StationLinkListRequest.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool subscribe = 2;
 * @return {boolean}
 */
proto.interface.c1.StationLinkListRequest.prototype.getSubscribe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.StationLinkListRequest} returns this
 */
proto.interface.c1.StationLinkListRequest.prototype.setSubscribe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool noReplay = 3;
 * @return {boolean}
 */
proto.interface.c1.StationLinkListRequest.prototype.getNoreplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.StationLinkListRequest} returns this
 */
proto.interface.c1.StationLinkListRequest.prototype.setNoreplay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interface.c1.StationLinkInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.StationLinkInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.StationLinkInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.StationLinkInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.StationLinkInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    neighborecgiList: jspb.Message.toObjectList(msg.getNeighborecgiList(),
    proto.interface.c1.ECGI.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.StationLinkInfo}
 */
proto.interface.c1.StationLinkInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.StationLinkInfo;
  return proto.interface.c1.StationLinkInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.StationLinkInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.StationLinkInfo}
 */
proto.interface.c1.StationLinkInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 2:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.addNeighborecgi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.StationLinkInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.StationLinkInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.StationLinkInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.StationLinkInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getNeighborecgiList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
};


/**
 * optional ECGI ecgi = 1;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.StationLinkInfo.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 1));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.StationLinkInfo} returns this
*/
proto.interface.c1.StationLinkInfo.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.StationLinkInfo} returns this
 */
proto.interface.c1.StationLinkInfo.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.StationLinkInfo.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ECGI neighborECGI = 2;
 * @return {!Array<!proto.interface.c1.ECGI>}
 */
proto.interface.c1.StationLinkInfo.prototype.getNeighborecgiList = function() {
  return /** @type{!Array<!proto.interface.c1.ECGI>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interface.c1.ECGI, 2));
};


/**
 * @param {!Array<!proto.interface.c1.ECGI>} value
 * @return {!proto.interface.c1.StationLinkInfo} returns this
*/
proto.interface.c1.StationLinkInfo.prototype.setNeighborecgiList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.interface.c1.ECGI=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.ECGI}
 */
proto.interface.c1.StationLinkInfo.prototype.addNeighborecgi = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.interface.c1.ECGI, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.StationLinkInfo} returns this
 */
proto.interface.c1.StationLinkInfo.prototype.clearNeighborecgiList = function() {
  return this.setNeighborecgiList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.UEListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.UEListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.UEListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.UEListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    crnti: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    subscribe: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    noreplay: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.UEListRequest}
 */
proto.interface.c1.UEListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.UEListRequest;
  return proto.interface.c1.UEListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.UEListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.UEListRequest}
 */
proto.interface.c1.UEListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrnti(value);
      break;
    case 2:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribe(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoreplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.UEListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.UEListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.UEListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.UEListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrnti();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getSubscribe();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getNoreplay();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string crnti = 1;
 * @return {string}
 */
proto.interface.c1.UEListRequest.prototype.getCrnti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.UEListRequest} returns this
 */
proto.interface.c1.UEListRequest.prototype.setCrnti = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ECGI ecgi = 2;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.UEListRequest.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 2));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.UEListRequest} returns this
*/
proto.interface.c1.UEListRequest.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.UEListRequest} returns this
 */
proto.interface.c1.UEListRequest.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.UEListRequest.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool subscribe = 3;
 * @return {boolean}
 */
proto.interface.c1.UEListRequest.prototype.getSubscribe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.UEListRequest} returns this
 */
proto.interface.c1.UEListRequest.prototype.setSubscribe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool noReplay = 4;
 * @return {boolean}
 */
proto.interface.c1.UEListRequest.prototype.getNoreplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.UEListRequest} returns this
 */
proto.interface.c1.UEListRequest.prototype.setNoreplay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.UEInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.UEInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.UEInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.UEInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    crnti: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    imsi: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.UEInfo}
 */
proto.interface.c1.UEInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.UEInfo;
  return proto.interface.c1.UEInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.UEInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.UEInfo}
 */
proto.interface.c1.UEInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrnti(value);
      break;
    case 2:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImsi(value);
      break;
    case 4:
      var value = /** @type {!proto.interface.c1.UEInfoType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.UEInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.UEInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.UEInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.UEInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrnti();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getImsi();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string crnti = 1;
 * @return {string}
 */
proto.interface.c1.UEInfo.prototype.getCrnti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.UEInfo} returns this
 */
proto.interface.c1.UEInfo.prototype.setCrnti = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ECGI ecgi = 2;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.UEInfo.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 2));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.UEInfo} returns this
*/
proto.interface.c1.UEInfo.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.UEInfo} returns this
 */
proto.interface.c1.UEInfo.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.UEInfo.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string imsi = 3;
 * @return {string}
 */
proto.interface.c1.UEInfo.prototype.getImsi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.UEInfo} returns this
 */
proto.interface.c1.UEInfo.prototype.setImsi = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional UEInfoType type = 4;
 * @return {!proto.interface.c1.UEInfoType}
 */
proto.interface.c1.UEInfo.prototype.getType = function() {
  return /** @type {!proto.interface.c1.UEInfoType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.interface.c1.UEInfoType} value
 * @return {!proto.interface.c1.UEInfo} returns this
 */
proto.interface.c1.UEInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.UELinkListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.UELinkListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.UELinkListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.UELinkListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    crnti: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    subscribe: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    noreplay: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    noimsi: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.UELinkListRequest}
 */
proto.interface.c1.UELinkListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.UELinkListRequest;
  return proto.interface.c1.UELinkListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.UELinkListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.UELinkListRequest}
 */
proto.interface.c1.UELinkListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrnti(value);
      break;
    case 2:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribe(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoreplay(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoimsi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.UELinkListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.UELinkListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.UELinkListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.UELinkListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrnti();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getSubscribe();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getNoreplay();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getNoimsi();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string crnti = 1;
 * @return {string}
 */
proto.interface.c1.UELinkListRequest.prototype.getCrnti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.UELinkListRequest} returns this
 */
proto.interface.c1.UELinkListRequest.prototype.setCrnti = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ECGI ecgi = 2;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.UELinkListRequest.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 2));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.UELinkListRequest} returns this
*/
proto.interface.c1.UELinkListRequest.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.UELinkListRequest} returns this
 */
proto.interface.c1.UELinkListRequest.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.UELinkListRequest.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool subscribe = 3;
 * @return {boolean}
 */
proto.interface.c1.UELinkListRequest.prototype.getSubscribe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.UELinkListRequest} returns this
 */
proto.interface.c1.UELinkListRequest.prototype.setSubscribe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool noReplay = 4;
 * @return {boolean}
 */
proto.interface.c1.UELinkListRequest.prototype.getNoreplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.UELinkListRequest} returns this
 */
proto.interface.c1.UELinkListRequest.prototype.setNoreplay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool noimsi = 5;
 * @return {boolean}
 */
proto.interface.c1.UELinkListRequest.prototype.getNoimsi = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.UELinkListRequest} returns this
 */
proto.interface.c1.UELinkListRequest.prototype.setNoimsi = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.ChannelQuality.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.ChannelQuality.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.ChannelQuality} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.ChannelQuality.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetecgi: (f = msg.getTargetecgi()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    cqihist: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.ChannelQuality}
 */
proto.interface.c1.ChannelQuality.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.ChannelQuality;
  return proto.interface.c1.ChannelQuality.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.ChannelQuality} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.ChannelQuality}
 */
proto.interface.c1.ChannelQuality.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setTargetecgi(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCqihist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.ChannelQuality.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.ChannelQuality.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.ChannelQuality} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.ChannelQuality.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetecgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getCqihist();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional ECGI targetEcgi = 1;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.ChannelQuality.prototype.getTargetecgi = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 1));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.ChannelQuality} returns this
*/
proto.interface.c1.ChannelQuality.prototype.setTargetecgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.ChannelQuality} returns this
 */
proto.interface.c1.ChannelQuality.prototype.clearTargetecgi = function() {
  return this.setTargetecgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.ChannelQuality.prototype.hasTargetecgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 cqiHist = 2;
 * @return {number}
 */
proto.interface.c1.ChannelQuality.prototype.getCqihist = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.interface.c1.ChannelQuality} returns this
 */
proto.interface.c1.ChannelQuality.prototype.setCqihist = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interface.c1.UELinkInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.UELinkInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.UELinkInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.UELinkInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.UELinkInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    crnti: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    channelqualitiesList: jspb.Message.toObjectList(msg.getChannelqualitiesList(),
    proto.interface.c1.ChannelQuality.toObject, includeInstance),
    imsi: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.UELinkInfo}
 */
proto.interface.c1.UELinkInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.UELinkInfo;
  return proto.interface.c1.UELinkInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.UELinkInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.UELinkInfo}
 */
proto.interface.c1.UELinkInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrnti(value);
      break;
    case 2:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 3:
      var value = new proto.interface.c1.ChannelQuality;
      reader.readMessage(value,proto.interface.c1.ChannelQuality.deserializeBinaryFromReader);
      msg.addChannelqualities(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImsi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.UELinkInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.UELinkInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.UELinkInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.UELinkInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrnti();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getChannelqualitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.interface.c1.ChannelQuality.serializeBinaryToWriter
    );
  }
  f = message.getImsi();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string crnti = 1;
 * @return {string}
 */
proto.interface.c1.UELinkInfo.prototype.getCrnti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.UELinkInfo} returns this
 */
proto.interface.c1.UELinkInfo.prototype.setCrnti = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ECGI ecgi = 2;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.UELinkInfo.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 2));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.UELinkInfo} returns this
*/
proto.interface.c1.UELinkInfo.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.UELinkInfo} returns this
 */
proto.interface.c1.UELinkInfo.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.UELinkInfo.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ChannelQuality channelQualities = 3;
 * @return {!Array<!proto.interface.c1.ChannelQuality>}
 */
proto.interface.c1.UELinkInfo.prototype.getChannelqualitiesList = function() {
  return /** @type{!Array<!proto.interface.c1.ChannelQuality>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interface.c1.ChannelQuality, 3));
};


/**
 * @param {!Array<!proto.interface.c1.ChannelQuality>} value
 * @return {!proto.interface.c1.UELinkInfo} returns this
*/
proto.interface.c1.UELinkInfo.prototype.setChannelqualitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.interface.c1.ChannelQuality=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.ChannelQuality}
 */
proto.interface.c1.UELinkInfo.prototype.addChannelqualities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.interface.c1.ChannelQuality, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.UELinkInfo} returns this
 */
proto.interface.c1.UELinkInfo.prototype.clearChannelqualitiesList = function() {
  return this.setChannelqualitiesList([]);
};


/**
 * optional string imsi = 4;
 * @return {string}
 */
proto.interface.c1.UELinkInfo.prototype.getImsi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.UELinkInfo} returns this
 */
proto.interface.c1.UELinkInfo.prototype.setImsi = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.HandOverRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.HandOverRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.HandOverRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.HandOverRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    crnti: jspb.Message.getFieldWithDefault(msg, 1, ""),
    srcstation: (f = msg.getSrcstation()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    dststation: (f = msg.getDststation()) && proto.interface.c1.ECGI.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.HandOverRequest}
 */
proto.interface.c1.HandOverRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.HandOverRequest;
  return proto.interface.c1.HandOverRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.HandOverRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.HandOverRequest}
 */
proto.interface.c1.HandOverRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrnti(value);
      break;
    case 2:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setSrcstation(value);
      break;
    case 3:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setDststation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.HandOverRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.HandOverRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.HandOverRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.HandOverRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrnti();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSrcstation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getDststation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
};


/**
 * optional string crnti = 1;
 * @return {string}
 */
proto.interface.c1.HandOverRequest.prototype.getCrnti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.HandOverRequest} returns this
 */
proto.interface.c1.HandOverRequest.prototype.setCrnti = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ECGI srcStation = 2;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.HandOverRequest.prototype.getSrcstation = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 2));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.HandOverRequest} returns this
*/
proto.interface.c1.HandOverRequest.prototype.setSrcstation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.HandOverRequest} returns this
 */
proto.interface.c1.HandOverRequest.prototype.clearSrcstation = function() {
  return this.setSrcstation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.HandOverRequest.prototype.hasSrcstation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ECGI dstStation = 3;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.HandOverRequest.prototype.getDststation = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 3));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.HandOverRequest} returns this
*/
proto.interface.c1.HandOverRequest.prototype.setDststation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.HandOverRequest} returns this
 */
proto.interface.c1.HandOverRequest.prototype.clearDststation = function() {
  return this.setDststation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.HandOverRequest.prototype.hasDststation = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.HandOverResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.HandOverResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.HandOverResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.HandOverResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.HandOverResponse}
 */
proto.interface.c1.HandOverResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.HandOverResponse;
  return proto.interface.c1.HandOverResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.HandOverResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.HandOverResponse}
 */
proto.interface.c1.HandOverResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.HandOverResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.HandOverResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.HandOverResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.HandOverResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.interface.c1.HandOverResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.HandOverResponse} returns this
 */
proto.interface.c1.HandOverResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.RadioPowerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.RadioPowerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.RadioPowerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.RadioPowerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.ECGI.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.RadioPowerRequest}
 */
proto.interface.c1.RadioPowerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.RadioPowerRequest;
  return proto.interface.c1.RadioPowerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.RadioPowerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.RadioPowerRequest}
 */
proto.interface.c1.RadioPowerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.ECGI;
      reader.readMessage(value,proto.interface.c1.ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 2:
      var value = /** @type {!proto.interface.c1.StationPowerOffset} */ (reader.readEnum());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.RadioPowerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.RadioPowerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.RadioPowerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.RadioPowerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ECGI ecgi = 1;
 * @return {?proto.interface.c1.ECGI}
 */
proto.interface.c1.RadioPowerRequest.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.ECGI, 1));
};


/**
 * @param {?proto.interface.c1.ECGI|undefined} value
 * @return {!proto.interface.c1.RadioPowerRequest} returns this
*/
proto.interface.c1.RadioPowerRequest.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.RadioPowerRequest} returns this
 */
proto.interface.c1.RadioPowerRequest.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.RadioPowerRequest.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StationPowerOffset offset = 2;
 * @return {!proto.interface.c1.StationPowerOffset}
 */
proto.interface.c1.RadioPowerRequest.prototype.getOffset = function() {
  return /** @type {!proto.interface.c1.StationPowerOffset} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.interface.c1.StationPowerOffset} value
 * @return {!proto.interface.c1.RadioPowerRequest} returns this
 */
proto.interface.c1.RadioPowerRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.RadioPowerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.RadioPowerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.RadioPowerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.RadioPowerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.RadioPowerResponse}
 */
proto.interface.c1.RadioPowerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.RadioPowerResponse;
  return proto.interface.c1.RadioPowerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.RadioPowerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.RadioPowerResponse}
 */
proto.interface.c1.RadioPowerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.RadioPowerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.RadioPowerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.RadioPowerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.RadioPowerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.interface.c1.RadioPowerResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interface.c1.RadioPowerResponse} returns this
 */
proto.interface.c1.RadioPowerResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.interface.c1.C1RequestMessageHeader.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && proto.interface.c1.C1RequestMessagePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RequestMessage}
 */
proto.interface.c1.C1RequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RequestMessage;
  return proto.interface.c1.C1RequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RequestMessage}
 */
proto.interface.c1.C1RequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1RequestMessageHeader;
      reader.readMessage(value,proto.interface.c1.C1RequestMessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.interface.c1.C1RequestMessagePayload;
      reader.readMessage(value,proto.interface.c1.C1RequestMessagePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.C1RequestMessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.C1RequestMessagePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional C1RequestMessageHeader header = 1;
 * @return {?proto.interface.c1.C1RequestMessageHeader}
 */
proto.interface.c1.C1RequestMessage.prototype.getHeader = function() {
  return /** @type{?proto.interface.c1.C1RequestMessageHeader} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RequestMessageHeader, 1));
};


/**
 * @param {?proto.interface.c1.C1RequestMessageHeader|undefined} value
 * @return {!proto.interface.c1.C1RequestMessage} returns this
*/
proto.interface.c1.C1RequestMessage.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RequestMessage} returns this
 */
proto.interface.c1.C1RequestMessage.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RequestMessage.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional C1RequestMessagePayload payload = 2;
 * @return {?proto.interface.c1.C1RequestMessagePayload}
 */
proto.interface.c1.C1RequestMessage.prototype.getPayload = function() {
  return /** @type{?proto.interface.c1.C1RequestMessagePayload} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RequestMessagePayload, 2));
};


/**
 * @param {?proto.interface.c1.C1RequestMessagePayload|undefined} value
 * @return {!proto.interface.c1.C1RequestMessage} returns this
*/
proto.interface.c1.C1RequestMessage.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RequestMessage} returns this
 */
proto.interface.c1.C1RequestMessage.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RequestMessage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1ResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1ResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1ResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1ResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.interface.c1.C1ResponseMessageHeader.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && proto.interface.c1.C1ResponseMessagePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1ResponseMessage}
 */
proto.interface.c1.C1ResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1ResponseMessage;
  return proto.interface.c1.C1ResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1ResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1ResponseMessage}
 */
proto.interface.c1.C1ResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1ResponseMessageHeader;
      reader.readMessage(value,proto.interface.c1.C1ResponseMessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.interface.c1.C1ResponseMessagePayload;
      reader.readMessage(value,proto.interface.c1.C1ResponseMessagePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1ResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1ResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1ResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1ResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.C1ResponseMessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.C1ResponseMessagePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional C1ResponseMessageHeader header = 1;
 * @return {?proto.interface.c1.C1ResponseMessageHeader}
 */
proto.interface.c1.C1ResponseMessage.prototype.getHeader = function() {
  return /** @type{?proto.interface.c1.C1ResponseMessageHeader} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1ResponseMessageHeader, 1));
};


/**
 * @param {?proto.interface.c1.C1ResponseMessageHeader|undefined} value
 * @return {!proto.interface.c1.C1ResponseMessage} returns this
*/
proto.interface.c1.C1ResponseMessage.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1ResponseMessage} returns this
 */
proto.interface.c1.C1ResponseMessage.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1ResponseMessage.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional C1ResponseMessagePayload payload = 2;
 * @return {?proto.interface.c1.C1ResponseMessagePayload}
 */
proto.interface.c1.C1ResponseMessage.prototype.getPayload = function() {
  return /** @type{?proto.interface.c1.C1ResponseMessagePayload} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1ResponseMessagePayload, 2));
};


/**
 * @param {?proto.interface.c1.C1ResponseMessagePayload|undefined} value
 * @return {!proto.interface.c1.C1ResponseMessage} returns this
*/
proto.interface.c1.C1ResponseMessage.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1ResponseMessage} returns this
 */
proto.interface.c1.C1ResponseMessage.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1ResponseMessage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RequestMessageHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RequestMessageHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RequestMessageHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RequestMessageHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RequestMessageHeader}
 */
proto.interface.c1.C1RequestMessageHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RequestMessageHeader;
  return proto.interface.c1.C1RequestMessageHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RequestMessageHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RequestMessageHeader}
 */
proto.interface.c1.C1RequestMessageHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.interface.c1.C1MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RequestMessageHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RequestMessageHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RequestMessageHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RequestMessageHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional C1MessageType type = 1;
 * @return {!proto.interface.c1.C1MessageType}
 */
proto.interface.c1.C1RequestMessageHeader.prototype.getType = function() {
  return /** @type {!proto.interface.c1.C1MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.interface.c1.C1MessageType} value
 * @return {!proto.interface.c1.C1RequestMessageHeader} returns this
 */
proto.interface.c1.C1RequestMessageHeader.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.interface.c1.C1RequestMessagePayload.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.interface.c1.C1RequestMessagePayload.RequestCase = {
  REQUEST_NOT_SET: 0,
  REQUESTEDRNIBTYPE: 1,
  HANDOVERREQUEST: 2,
  RRMCONFIGURATIONREQUEST: 3
};

/**
 * @return {proto.interface.c1.C1RequestMessagePayload.RequestCase}
 */
proto.interface.c1.C1RequestMessagePayload.prototype.getRequestCase = function() {
  return /** @type {proto.interface.c1.C1RequestMessagePayload.RequestCase} */(jspb.Message.computeOneofCase(this, proto.interface.c1.C1RequestMessagePayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RequestMessagePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RequestMessagePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RequestMessagePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RequestMessagePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestedrnibtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    handoverrequest: (f = msg.getHandoverrequest()) && proto.interface.c1.C1HandoverRequest.toObject(includeInstance, f),
    rrmconfigurationrequest: (f = msg.getRrmconfigurationrequest()) && proto.interface.c1.C1RRMConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RequestMessagePayload}
 */
proto.interface.c1.C1RequestMessagePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RequestMessagePayload;
  return proto.interface.c1.C1RequestMessagePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RequestMessagePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RequestMessagePayload}
 */
proto.interface.c1.C1RequestMessagePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.interface.c1.C1RNIBType} */ (reader.readEnum());
      msg.setRequestedrnibtype(value);
      break;
    case 2:
      var value = new proto.interface.c1.C1HandoverRequest;
      reader.readMessage(value,proto.interface.c1.C1HandoverRequest.deserializeBinaryFromReader);
      msg.setHandoverrequest(value);
      break;
    case 3:
      var value = new proto.interface.c1.C1RRMConfiguration;
      reader.readMessage(value,proto.interface.c1.C1RRMConfiguration.deserializeBinaryFromReader);
      msg.setRrmconfigurationrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RequestMessagePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RequestMessagePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RequestMessagePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RequestMessagePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.interface.c1.C1RNIBType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHandoverrequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.C1HandoverRequest.serializeBinaryToWriter
    );
  }
  f = message.getRrmconfigurationrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.interface.c1.C1RRMConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional C1RNIBType requestedRNIBType = 1;
 * @return {!proto.interface.c1.C1RNIBType}
 */
proto.interface.c1.C1RequestMessagePayload.prototype.getRequestedrnibtype = function() {
  return /** @type {!proto.interface.c1.C1RNIBType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.interface.c1.C1RNIBType} value
 * @return {!proto.interface.c1.C1RequestMessagePayload} returns this
 */
proto.interface.c1.C1RequestMessagePayload.prototype.setRequestedrnibtype = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.interface.c1.C1RequestMessagePayload.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.interface.c1.C1RequestMessagePayload} returns this
 */
proto.interface.c1.C1RequestMessagePayload.prototype.clearRequestedrnibtype = function() {
  return jspb.Message.setOneofField(this, 1, proto.interface.c1.C1RequestMessagePayload.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RequestMessagePayload.prototype.hasRequestedrnibtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional C1HandoverRequest handoverRequest = 2;
 * @return {?proto.interface.c1.C1HandoverRequest}
 */
proto.interface.c1.C1RequestMessagePayload.prototype.getHandoverrequest = function() {
  return /** @type{?proto.interface.c1.C1HandoverRequest} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1HandoverRequest, 2));
};


/**
 * @param {?proto.interface.c1.C1HandoverRequest|undefined} value
 * @return {!proto.interface.c1.C1RequestMessagePayload} returns this
*/
proto.interface.c1.C1RequestMessagePayload.prototype.setHandoverrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.interface.c1.C1RequestMessagePayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RequestMessagePayload} returns this
 */
proto.interface.c1.C1RequestMessagePayload.prototype.clearHandoverrequest = function() {
  return this.setHandoverrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RequestMessagePayload.prototype.hasHandoverrequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional C1RRMConfiguration rrmConfigurationRequest = 3;
 * @return {?proto.interface.c1.C1RRMConfiguration}
 */
proto.interface.c1.C1RequestMessagePayload.prototype.getRrmconfigurationrequest = function() {
  return /** @type{?proto.interface.c1.C1RRMConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RRMConfiguration, 3));
};


/**
 * @param {?proto.interface.c1.C1RRMConfiguration|undefined} value
 * @return {!proto.interface.c1.C1RequestMessagePayload} returns this
*/
proto.interface.c1.C1RequestMessagePayload.prototype.setRrmconfigurationrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.interface.c1.C1RequestMessagePayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RequestMessagePayload} returns this
 */
proto.interface.c1.C1RequestMessagePayload.prototype.clearRrmconfigurationrequest = function() {
  return this.setRrmconfigurationrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RequestMessagePayload.prototype.hasRrmconfigurationrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1ResponseMessageHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1ResponseMessageHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1ResponseMessageHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1ResponseMessageHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1ResponseMessageHeader}
 */
proto.interface.c1.C1ResponseMessageHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1ResponseMessageHeader;
  return proto.interface.c1.C1ResponseMessageHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1ResponseMessageHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1ResponseMessageHeader}
 */
proto.interface.c1.C1ResponseMessageHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.interface.c1.C1MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1ResponseMessageHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1ResponseMessageHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1ResponseMessageHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1ResponseMessageHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional C1MessageType type = 1;
 * @return {!proto.interface.c1.C1MessageType}
 */
proto.interface.c1.C1ResponseMessageHeader.prototype.getType = function() {
  return /** @type {!proto.interface.c1.C1MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.interface.c1.C1MessageType} value
 * @return {!proto.interface.c1.C1ResponseMessageHeader} returns this
 */
proto.interface.c1.C1ResponseMessageHeader.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.interface.c1.C1ResponseMessagePayload.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.interface.c1.C1ResponseMessagePayload.ResultCase = {
  RESULT_NOT_SET: 0,
  RESPONSECODE: 1,
  RNIBCELLS: 2,
  RNIBUES: 3,
  RNIBLINKS: 4
};

/**
 * @return {proto.interface.c1.C1ResponseMessagePayload.ResultCase}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.getResultCase = function() {
  return /** @type {proto.interface.c1.C1ResponseMessagePayload.ResultCase} */(jspb.Message.computeOneofCase(this, proto.interface.c1.C1ResponseMessagePayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1ResponseMessagePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1ResponseMessagePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1ResponseMessagePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rnibcells: (f = msg.getRnibcells()) && proto.interface.c1.C1RNIBCells.toObject(includeInstance, f),
    rnibues: (f = msg.getRnibues()) && proto.interface.c1.C1RNIBUEs.toObject(includeInstance, f),
    rniblinks: (f = msg.getRniblinks()) && proto.interface.c1.C1RNIBLinks.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1ResponseMessagePayload}
 */
proto.interface.c1.C1ResponseMessagePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1ResponseMessagePayload;
  return proto.interface.c1.C1ResponseMessagePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1ResponseMessagePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1ResponseMessagePayload}
 */
proto.interface.c1.C1ResponseMessagePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = new proto.interface.c1.C1RNIBCells;
      reader.readMessage(value,proto.interface.c1.C1RNIBCells.deserializeBinaryFromReader);
      msg.setRnibcells(value);
      break;
    case 3:
      var value = new proto.interface.c1.C1RNIBUEs;
      reader.readMessage(value,proto.interface.c1.C1RNIBUEs.deserializeBinaryFromReader);
      msg.setRnibues(value);
      break;
    case 4:
      var value = new proto.interface.c1.C1RNIBLinks;
      reader.readMessage(value,proto.interface.c1.C1RNIBLinks.deserializeBinaryFromReader);
      msg.setRniblinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1ResponseMessagePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1ResponseMessagePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1ResponseMessagePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRnibcells();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.C1RNIBCells.serializeBinaryToWriter
    );
  }
  f = message.getRnibues();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.interface.c1.C1RNIBUEs.serializeBinaryToWriter
    );
  }
  f = message.getRniblinks();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.interface.c1.C1RNIBLinks.serializeBinaryToWriter
    );
  }
};


/**
 * optional string responseCode = 1;
 * @return {string}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.getResponsecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1ResponseMessagePayload} returns this
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.setResponsecode = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.interface.c1.C1ResponseMessagePayload.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.interface.c1.C1ResponseMessagePayload} returns this
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.clearResponsecode = function() {
  return jspb.Message.setOneofField(this, 1, proto.interface.c1.C1ResponseMessagePayload.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional C1RNIBCells rNIBCells = 2;
 * @return {?proto.interface.c1.C1RNIBCells}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.getRnibcells = function() {
  return /** @type{?proto.interface.c1.C1RNIBCells} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RNIBCells, 2));
};


/**
 * @param {?proto.interface.c1.C1RNIBCells|undefined} value
 * @return {!proto.interface.c1.C1ResponseMessagePayload} returns this
*/
proto.interface.c1.C1ResponseMessagePayload.prototype.setRnibcells = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.interface.c1.C1ResponseMessagePayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1ResponseMessagePayload} returns this
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.clearRnibcells = function() {
  return this.setRnibcells(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.hasRnibcells = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional C1RNIBUEs rNIBUEs = 3;
 * @return {?proto.interface.c1.C1RNIBUEs}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.getRnibues = function() {
  return /** @type{?proto.interface.c1.C1RNIBUEs} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RNIBUEs, 3));
};


/**
 * @param {?proto.interface.c1.C1RNIBUEs|undefined} value
 * @return {!proto.interface.c1.C1ResponseMessagePayload} returns this
*/
proto.interface.c1.C1ResponseMessagePayload.prototype.setRnibues = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.interface.c1.C1ResponseMessagePayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1ResponseMessagePayload} returns this
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.clearRnibues = function() {
  return this.setRnibues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.hasRnibues = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional C1RNIBLinks rNIBLinks = 4;
 * @return {?proto.interface.c1.C1RNIBLinks}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.getRniblinks = function() {
  return /** @type{?proto.interface.c1.C1RNIBLinks} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RNIBLinks, 4));
};


/**
 * @param {?proto.interface.c1.C1RNIBLinks|undefined} value
 * @return {!proto.interface.c1.C1ResponseMessagePayload} returns this
*/
proto.interface.c1.C1ResponseMessagePayload.prototype.setRniblinks = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.interface.c1.C1ResponseMessagePayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1ResponseMessagePayload} returns this
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.clearRniblinks = function() {
  return this.setRniblinks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1ResponseMessagePayload.prototype.hasRniblinks = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interface.c1.C1RNIBCells.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RNIBCells.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RNIBCells.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RNIBCells} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBCells.toObject = function(includeInstance, msg) {
  var f, obj = {
    rnibcellsList: jspb.Message.toObjectList(msg.getRnibcellsList(),
    proto.interface.c1.C1RNIBCell.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RNIBCells}
 */
proto.interface.c1.C1RNIBCells.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RNIBCells;
  return proto.interface.c1.C1RNIBCells.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RNIBCells} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RNIBCells}
 */
proto.interface.c1.C1RNIBCells.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1RNIBCell;
      reader.readMessage(value,proto.interface.c1.C1RNIBCell.deserializeBinaryFromReader);
      msg.addRnibcells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RNIBCells.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RNIBCells.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RNIBCells} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBCells.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRnibcellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.interface.c1.C1RNIBCell.serializeBinaryToWriter
    );
  }
};


/**
 * repeated C1RNIBCell rNIBCells = 1;
 * @return {!Array<!proto.interface.c1.C1RNIBCell>}
 */
proto.interface.c1.C1RNIBCells.prototype.getRnibcellsList = function() {
  return /** @type{!Array<!proto.interface.c1.C1RNIBCell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interface.c1.C1RNIBCell, 1));
};


/**
 * @param {!Array<!proto.interface.c1.C1RNIBCell>} value
 * @return {!proto.interface.c1.C1RNIBCells} returns this
*/
proto.interface.c1.C1RNIBCells.prototype.setRnibcellsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.interface.c1.C1RNIBCell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RNIBCell}
 */
proto.interface.c1.C1RNIBCells.prototype.addRnibcells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.interface.c1.C1RNIBCell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RNIBCells} returns this
 */
proto.interface.c1.C1RNIBCells.prototype.clearRnibcellsList = function() {
  return this.setRnibcellsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interface.c1.C1RNIBUEs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RNIBUEs.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RNIBUEs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RNIBUEs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBUEs.toObject = function(includeInstance, msg) {
  var f, obj = {
    rnibuesList: jspb.Message.toObjectList(msg.getRnibuesList(),
    proto.interface.c1.C1RNIBUE.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RNIBUEs}
 */
proto.interface.c1.C1RNIBUEs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RNIBUEs;
  return proto.interface.c1.C1RNIBUEs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RNIBUEs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RNIBUEs}
 */
proto.interface.c1.C1RNIBUEs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1RNIBUE;
      reader.readMessage(value,proto.interface.c1.C1RNIBUE.deserializeBinaryFromReader);
      msg.addRnibues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RNIBUEs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RNIBUEs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RNIBUEs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBUEs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRnibuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.interface.c1.C1RNIBUE.serializeBinaryToWriter
    );
  }
};


/**
 * repeated C1RNIBUE rNIBUEs = 1;
 * @return {!Array<!proto.interface.c1.C1RNIBUE>}
 */
proto.interface.c1.C1RNIBUEs.prototype.getRnibuesList = function() {
  return /** @type{!Array<!proto.interface.c1.C1RNIBUE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interface.c1.C1RNIBUE, 1));
};


/**
 * @param {!Array<!proto.interface.c1.C1RNIBUE>} value
 * @return {!proto.interface.c1.C1RNIBUEs} returns this
*/
proto.interface.c1.C1RNIBUEs.prototype.setRnibuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.interface.c1.C1RNIBUE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RNIBUE}
 */
proto.interface.c1.C1RNIBUEs.prototype.addRnibues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.interface.c1.C1RNIBUE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RNIBUEs} returns this
 */
proto.interface.c1.C1RNIBUEs.prototype.clearRnibuesList = function() {
  return this.setRnibuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interface.c1.C1RNIBLinks.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RNIBLinks.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RNIBLinks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RNIBLinks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBLinks.toObject = function(includeInstance, msg) {
  var f, obj = {
    rniblinksList: jspb.Message.toObjectList(msg.getRniblinksList(),
    proto.interface.c1.C1RNIBLink.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RNIBLinks}
 */
proto.interface.c1.C1RNIBLinks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RNIBLinks;
  return proto.interface.c1.C1RNIBLinks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RNIBLinks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RNIBLinks}
 */
proto.interface.c1.C1RNIBLinks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1RNIBLink;
      reader.readMessage(value,proto.interface.c1.C1RNIBLink.deserializeBinaryFromReader);
      msg.addRniblinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RNIBLinks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RNIBLinks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RNIBLinks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBLinks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRniblinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.interface.c1.C1RNIBLink.serializeBinaryToWriter
    );
  }
};


/**
 * repeated C1RNIBLink rNIBLinks = 1;
 * @return {!Array<!proto.interface.c1.C1RNIBLink>}
 */
proto.interface.c1.C1RNIBLinks.prototype.getRniblinksList = function() {
  return /** @type{!Array<!proto.interface.c1.C1RNIBLink>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interface.c1.C1RNIBLink, 1));
};


/**
 * @param {!Array<!proto.interface.c1.C1RNIBLink>} value
 * @return {!proto.interface.c1.C1RNIBLinks} returns this
*/
proto.interface.c1.C1RNIBLinks.prototype.setRniblinksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.interface.c1.C1RNIBLink=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RNIBLink}
 */
proto.interface.c1.C1RNIBLinks.prototype.addRniblinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.interface.c1.C1RNIBLink, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RNIBLinks} returns this
 */
proto.interface.c1.C1RNIBLinks.prototype.clearRniblinksList = function() {
  return this.setRniblinksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1ECGI.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1ECGI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1ECGI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1ECGI.toObject = function(includeInstance, msg) {
  var f, obj = {
    plmnid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ecid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1ECGI}
 */
proto.interface.c1.C1ECGI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1ECGI;
  return proto.interface.c1.C1ECGI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1ECGI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1ECGI}
 */
proto.interface.c1.C1ECGI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlmnid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEcid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1ECGI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1ECGI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1ECGI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1ECGI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlmnid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEcid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string plmnId = 1;
 * @return {string}
 */
proto.interface.c1.C1ECGI.prototype.getPlmnid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1ECGI} returns this
 */
proto.interface.c1.C1ECGI.prototype.setPlmnid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ecid = 2;
 * @return {string}
 */
proto.interface.c1.C1ECGI.prototype.getEcid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1ECGI} returns this
 */
proto.interface.c1.C1ECGI.prototype.setEcid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1CandScell.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1CandScell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1CandScell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1CandScell.toObject = function(includeInstance, msg) {
  var f, obj = {
    pci: jspb.Message.getFieldWithDefault(msg, 1, ""),
    earfcndl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1CandScell}
 */
proto.interface.c1.C1CandScell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1CandScell;
  return proto.interface.c1.C1CandScell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1CandScell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1CandScell}
 */
proto.interface.c1.C1CandScell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPci(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEarfcndl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1CandScell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1CandScell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1CandScell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1CandScell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPci();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEarfcndl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string pci = 1;
 * @return {string}
 */
proto.interface.c1.C1CandScell.prototype.getPci = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CandScell} returns this
 */
proto.interface.c1.C1CandScell.prototype.setPci = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string earfcnDl = 2;
 * @return {string}
 */
proto.interface.c1.C1CandScell.prototype.getEarfcndl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CandScell} returns this
 */
proto.interface.c1.C1CandScell.prototype.setEarfcndl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RNIBCell.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RNIBCell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RNIBCell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBCell.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.C1ECGI.toObject(includeInstance, f),
    cellconfiguration: (f = msg.getCellconfiguration()) && proto.interface.c1.C1CellConfigAttribute.toObject(includeInstance, f),
    rrmconfiguration: (f = msg.getRrmconfiguration()) && proto.interface.c1.C1RRMConfigAttribute.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RNIBCell}
 */
proto.interface.c1.C1RNIBCell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RNIBCell;
  return proto.interface.c1.C1RNIBCell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RNIBCell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RNIBCell}
 */
proto.interface.c1.C1RNIBCell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1ECGI;
      reader.readMessage(value,proto.interface.c1.C1ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 2:
      var value = new proto.interface.c1.C1CellConfigAttribute;
      reader.readMessage(value,proto.interface.c1.C1CellConfigAttribute.deserializeBinaryFromReader);
      msg.setCellconfiguration(value);
      break;
    case 3:
      var value = new proto.interface.c1.C1RRMConfigAttribute;
      reader.readMessage(value,proto.interface.c1.C1RRMConfigAttribute.deserializeBinaryFromReader);
      msg.setRrmconfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RNIBCell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RNIBCell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RNIBCell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBCell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.C1ECGI.serializeBinaryToWriter
    );
  }
  f = message.getCellconfiguration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.C1CellConfigAttribute.serializeBinaryToWriter
    );
  }
  f = message.getRrmconfiguration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.interface.c1.C1RRMConfigAttribute.serializeBinaryToWriter
    );
  }
};


/**
 * optional C1ECGI ecgi = 1;
 * @return {?proto.interface.c1.C1ECGI}
 */
proto.interface.c1.C1RNIBCell.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.C1ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1ECGI, 1));
};


/**
 * @param {?proto.interface.c1.C1ECGI|undefined} value
 * @return {!proto.interface.c1.C1RNIBCell} returns this
*/
proto.interface.c1.C1RNIBCell.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RNIBCell} returns this
 */
proto.interface.c1.C1RNIBCell.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RNIBCell.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional C1CellConfigAttribute cellConfiguration = 2;
 * @return {?proto.interface.c1.C1CellConfigAttribute}
 */
proto.interface.c1.C1RNIBCell.prototype.getCellconfiguration = function() {
  return /** @type{?proto.interface.c1.C1CellConfigAttribute} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1CellConfigAttribute, 2));
};


/**
 * @param {?proto.interface.c1.C1CellConfigAttribute|undefined} value
 * @return {!proto.interface.c1.C1RNIBCell} returns this
*/
proto.interface.c1.C1RNIBCell.prototype.setCellconfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RNIBCell} returns this
 */
proto.interface.c1.C1RNIBCell.prototype.clearCellconfiguration = function() {
  return this.setCellconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RNIBCell.prototype.hasCellconfiguration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional C1RRMConfigAttribute rrmConfiguration = 3;
 * @return {?proto.interface.c1.C1RRMConfigAttribute}
 */
proto.interface.c1.C1RNIBCell.prototype.getRrmconfiguration = function() {
  return /** @type{?proto.interface.c1.C1RRMConfigAttribute} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RRMConfigAttribute, 3));
};


/**
 * @param {?proto.interface.c1.C1RRMConfigAttribute|undefined} value
 * @return {!proto.interface.c1.C1RNIBCell} returns this
*/
proto.interface.c1.C1RNIBCell.prototype.setRrmconfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RNIBCell} returns this
 */
proto.interface.c1.C1RNIBCell.prototype.clearRrmconfiguration = function() {
  return this.setRrmconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RNIBCell.prototype.hasRrmconfiguration = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interface.c1.C1CellConfigAttribute.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1CellConfigAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1CellConfigAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1CellConfigAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.C1ECGI.toObject(includeInstance, f),
    pci: jspb.Message.getFieldWithDefault(msg, 2, ""),
    candscellsList: jspb.Message.toObjectList(msg.getCandscellsList(),
    proto.interface.c1.C1CandScell.toObject, includeInstance),
    earfcndl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    earfcnul: jspb.Message.getFieldWithDefault(msg, 5, ""),
    rbsperttidl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    rbsperttiul: jspb.Message.getFieldWithDefault(msg, 7, ""),
    numtxantenna: jspb.Message.getFieldWithDefault(msg, 8, ""),
    duplexmode: jspb.Message.getFieldWithDefault(msg, 9, ""),
    maxnumconnectedues: jspb.Message.getFieldWithDefault(msg, 10, ""),
    maxnumconnectedbearers: jspb.Message.getFieldWithDefault(msg, 11, ""),
    maxnumuesschedperttidl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    maxnumuesschedperttiul: jspb.Message.getFieldWithDefault(msg, 13, ""),
    dlfsschedenable: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1CellConfigAttribute}
 */
proto.interface.c1.C1CellConfigAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1CellConfigAttribute;
  return proto.interface.c1.C1CellConfigAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1CellConfigAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1CellConfigAttribute}
 */
proto.interface.c1.C1CellConfigAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1ECGI;
      reader.readMessage(value,proto.interface.c1.C1ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPci(value);
      break;
    case 3:
      var value = new proto.interface.c1.C1CandScell;
      reader.readMessage(value,proto.interface.c1.C1CandScell.deserializeBinaryFromReader);
      msg.addCandscells(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEarfcndl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEarfcnul(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRbsperttidl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRbsperttiul(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumtxantenna(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuplexmode(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxnumconnectedues(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxnumconnectedbearers(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxnumuesschedperttidl(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxnumuesschedperttiul(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDlfsschedenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1CellConfigAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1CellConfigAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1CellConfigAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.C1ECGI.serializeBinaryToWriter
    );
  }
  f = message.getPci();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCandscellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.interface.c1.C1CandScell.serializeBinaryToWriter
    );
  }
  f = message.getEarfcndl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEarfcnul();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRbsperttidl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRbsperttiul();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getNumtxantenna();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDuplexmode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMaxnumconnectedues();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMaxnumconnectedbearers();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getMaxnumuesschedperttidl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getMaxnumuesschedperttiul();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDlfsschedenable();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional C1ECGI ecgi = 1;
 * @return {?proto.interface.c1.C1ECGI}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.C1ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1ECGI, 1));
};


/**
 * @param {?proto.interface.c1.C1ECGI|undefined} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
*/
proto.interface.c1.C1CellConfigAttribute.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string pci = 2;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getPci = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setPci = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated C1CandScell candScells = 3;
 * @return {!Array<!proto.interface.c1.C1CandScell>}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getCandscellsList = function() {
  return /** @type{!Array<!proto.interface.c1.C1CandScell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interface.c1.C1CandScell, 3));
};


/**
 * @param {!Array<!proto.interface.c1.C1CandScell>} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
*/
proto.interface.c1.C1CellConfigAttribute.prototype.setCandscellsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.interface.c1.C1CandScell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1CandScell}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.addCandscells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.interface.c1.C1CandScell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.clearCandscellsList = function() {
  return this.setCandscellsList([]);
};


/**
 * optional string earfcnDl = 4;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getEarfcndl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setEarfcndl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string earfcnUl = 5;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getEarfcnul = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setEarfcnul = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string rbsPerTtiDl = 6;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getRbsperttidl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setRbsperttidl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string rbsPerTtiUl = 7;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getRbsperttiul = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setRbsperttiul = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string numTxAntenna = 8;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getNumtxantenna = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setNumtxantenna = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string duplexMode = 9;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getDuplexmode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setDuplexmode = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string maxNumConnectedUes = 10;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getMaxnumconnectedues = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setMaxnumconnectedues = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string maxNumConnectedBearers = 11;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getMaxnumconnectedbearers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setMaxnumconnectedbearers = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string maxNumUesSchedPerTtiDl = 12;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getMaxnumuesschedperttidl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setMaxnumuesschedperttidl = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string maxNumUesSchedPerTtiUl = 13;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getMaxnumuesschedperttiul = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setMaxnumuesschedperttiul = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string dlfsSchedEnable = 14;
 * @return {string}
 */
proto.interface.c1.C1CellConfigAttribute.prototype.getDlfsschedenable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1CellConfigAttribute} returns this
 */
proto.interface.c1.C1CellConfigAttribute.prototype.setDlfsschedenable = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1PciArfcn.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1PciArfcn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1PciArfcn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1PciArfcn.toObject = function(includeInstance, msg) {
  var f, obj = {
    pci: jspb.Message.getFieldWithDefault(msg, 1, ""),
    earfcndl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1PciArfcn}
 */
proto.interface.c1.C1PciArfcn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1PciArfcn;
  return proto.interface.c1.C1PciArfcn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1PciArfcn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1PciArfcn}
 */
proto.interface.c1.C1PciArfcn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPci(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEarfcndl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1PciArfcn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1PciArfcn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1PciArfcn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1PciArfcn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPci();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEarfcndl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string pci = 1;
 * @return {string}
 */
proto.interface.c1.C1PciArfcn.prototype.getPci = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1PciArfcn} returns this
 */
proto.interface.c1.C1PciArfcn.prototype.setPci = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string earfcnDl = 2;
 * @return {string}
 */
proto.interface.c1.C1PciArfcn.prototype.getEarfcndl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1PciArfcn} returns this
 */
proto.interface.c1.C1PciArfcn.prototype.setEarfcndl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interface.c1.C1RRMConfigAttribute.repeatedFields_ = [2,4,5,6,7,8,9,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RRMConfigAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RRMConfigAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RRMConfigAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.C1ECGI.toObject(includeInstance, f),
    crntiList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    pciarfcn: (f = msg.getPciarfcn()) && proto.interface.c1.C1PciArfcn.toObject(includeInstance, f),
    paList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    startprbdlList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    endprbdlList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    subframebitmaskdlList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    p0uepuschList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    startprbulList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    endprbulList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    subframebitmaskulList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RRMConfigAttribute}
 */
proto.interface.c1.C1RRMConfigAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RRMConfigAttribute;
  return proto.interface.c1.C1RRMConfigAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RRMConfigAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RRMConfigAttribute}
 */
proto.interface.c1.C1RRMConfigAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1ECGI;
      reader.readMessage(value,proto.interface.c1.C1ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addCrnti(value);
      break;
    case 3:
      var value = new proto.interface.c1.C1PciArfcn;
      reader.readMessage(value,proto.interface.c1.C1PciArfcn.deserializeBinaryFromReader);
      msg.setPciarfcn(value);
      break;
    case 4:
      var value = /** @type {!Array<!proto.interface.c1.C1XICICPA>} */ (reader.readPackedEnum());
      msg.setPaList(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addStartprbdl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addEndprbdl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addSubframebitmaskdl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addP0uepusch(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addStartprbul(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addEndprbul(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addSubframebitmaskul(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RRMConfigAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RRMConfigAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RRMConfigAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.C1ECGI.serializeBinaryToWriter
    );
  }
  f = message.getCrntiList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPciarfcn();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.interface.c1.C1PciArfcn.serializeBinaryToWriter
    );
  }
  f = message.getPaList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getStartprbdlList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getEndprbdlList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getSubframebitmaskdlList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getP0uepuschList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getStartprbulList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getEndprbulList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getSubframebitmaskulList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
};


/**
 * optional C1ECGI ecgi = 1;
 * @return {?proto.interface.c1.C1ECGI}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.C1ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1ECGI, 1));
};


/**
 * @param {?proto.interface.c1.C1ECGI|undefined} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
*/
proto.interface.c1.C1RRMConfigAttribute.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string crnti = 2;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getCrntiList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.setCrntiList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.addCrnti = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearCrntiList = function() {
  return this.setCrntiList([]);
};


/**
 * optional C1PciArfcn pciArfcn = 3;
 * @return {?proto.interface.c1.C1PciArfcn}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getPciarfcn = function() {
  return /** @type{?proto.interface.c1.C1PciArfcn} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1PciArfcn, 3));
};


/**
 * @param {?proto.interface.c1.C1PciArfcn|undefined} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
*/
proto.interface.c1.C1RRMConfigAttribute.prototype.setPciarfcn = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearPciarfcn = function() {
  return this.setPciarfcn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.hasPciarfcn = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated C1XICICPA pa = 4;
 * @return {!Array<!proto.interface.c1.C1XICICPA>}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getPaList = function() {
  return /** @type {!Array<!proto.interface.c1.C1XICICPA>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.interface.c1.C1XICICPA>} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.setPaList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.interface.c1.C1XICICPA} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.addPa = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearPaList = function() {
  return this.setPaList([]);
};


/**
 * repeated string startPrbDl = 5;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getStartprbdlList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.setStartprbdlList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.addStartprbdl = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearStartprbdlList = function() {
  return this.setStartprbdlList([]);
};


/**
 * repeated string endPrbDl = 6;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getEndprbdlList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.setEndprbdlList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.addEndprbdl = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearEndprbdlList = function() {
  return this.setEndprbdlList([]);
};


/**
 * repeated string subFrameBitmaskDl = 7;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getSubframebitmaskdlList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.setSubframebitmaskdlList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.addSubframebitmaskdl = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearSubframebitmaskdlList = function() {
  return this.setSubframebitmaskdlList([]);
};


/**
 * repeated string p0UePusch = 8;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getP0uepuschList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.setP0uepuschList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.addP0uepusch = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearP0uepuschList = function() {
  return this.setP0uepuschList([]);
};


/**
 * repeated string startPrbUl = 9;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getStartprbulList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.setStartprbulList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.addStartprbul = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearStartprbulList = function() {
  return this.setStartprbulList([]);
};


/**
 * repeated string endPrbUl = 10;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getEndprbulList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.setEndprbulList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.addEndprbul = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearEndprbulList = function() {
  return this.setEndprbulList([]);
};


/**
 * repeated string subFrameBitmaskUl = 11;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.getSubframebitmaskulList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.setSubframebitmaskulList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.addSubframebitmaskul = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RRMConfigAttribute} returns this
 */
proto.interface.c1.C1RRMConfigAttribute.prototype.clearSubframebitmaskulList = function() {
  return this.setSubframebitmaskulList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RNIBUE.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RNIBUE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RNIBUE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBUE.toObject = function(includeInstance, msg) {
  var f, obj = {
    imsi: jspb.Message.getFieldWithDefault(msg, 1, ""),
    crnti: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scell: (f = msg.getScell()) && proto.interface.c1.C1ECGI.toObject(includeInstance, f),
    mmeues1apid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    enbues1apid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RNIBUE}
 */
proto.interface.c1.C1RNIBUE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RNIBUE;
  return proto.interface.c1.C1RNIBUE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RNIBUE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RNIBUE}
 */
proto.interface.c1.C1RNIBUE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImsi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrnti(value);
      break;
    case 3:
      var value = new proto.interface.c1.C1ECGI;
      reader.readMessage(value,proto.interface.c1.C1ECGI.deserializeBinaryFromReader);
      msg.setScell(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMmeues1apid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnbues1apid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RNIBUE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RNIBUE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RNIBUE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBUE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImsi();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCrnti();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScell();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.interface.c1.C1ECGI.serializeBinaryToWriter
    );
  }
  f = message.getMmeues1apid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEnbues1apid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string imsi = 1;
 * @return {string}
 */
proto.interface.c1.C1RNIBUE.prototype.getImsi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1RNIBUE} returns this
 */
proto.interface.c1.C1RNIBUE.prototype.setImsi = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string crnti = 2;
 * @return {string}
 */
proto.interface.c1.C1RNIBUE.prototype.getCrnti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1RNIBUE} returns this
 */
proto.interface.c1.C1RNIBUE.prototype.setCrnti = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional C1ECGI sCell = 3;
 * @return {?proto.interface.c1.C1ECGI}
 */
proto.interface.c1.C1RNIBUE.prototype.getScell = function() {
  return /** @type{?proto.interface.c1.C1ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1ECGI, 3));
};


/**
 * @param {?proto.interface.c1.C1ECGI|undefined} value
 * @return {!proto.interface.c1.C1RNIBUE} returns this
*/
proto.interface.c1.C1RNIBUE.prototype.setScell = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RNIBUE} returns this
 */
proto.interface.c1.C1RNIBUE.prototype.clearScell = function() {
  return this.setScell(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RNIBUE.prototype.hasScell = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string mmeUeS1apId = 4;
 * @return {string}
 */
proto.interface.c1.C1RNIBUE.prototype.getMmeues1apid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1RNIBUE} returns this
 */
proto.interface.c1.C1RNIBUE.prototype.setMmeues1apid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string enbUeS1apId = 5;
 * @return {string}
 */
proto.interface.c1.C1RNIBUE.prototype.getEnbues1apid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1RNIBUE} returns this
 */
proto.interface.c1.C1RNIBUE.prototype.setEnbues1apid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RNIBLinkID.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RNIBLinkID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RNIBLinkID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBLinkID.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.C1ECGI.toObject(includeInstance, f),
    imsi: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RNIBLinkID}
 */
proto.interface.c1.C1RNIBLinkID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RNIBLinkID;
  return proto.interface.c1.C1RNIBLinkID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RNIBLinkID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RNIBLinkID}
 */
proto.interface.c1.C1RNIBLinkID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1ECGI;
      reader.readMessage(value,proto.interface.c1.C1ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImsi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RNIBLinkID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RNIBLinkID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RNIBLinkID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBLinkID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.C1ECGI.serializeBinaryToWriter
    );
  }
  f = message.getImsi();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional C1ECGI ecgi = 1;
 * @return {?proto.interface.c1.C1ECGI}
 */
proto.interface.c1.C1RNIBLinkID.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.C1ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1ECGI, 1));
};


/**
 * @param {?proto.interface.c1.C1ECGI|undefined} value
 * @return {!proto.interface.c1.C1RNIBLinkID} returns this
*/
proto.interface.c1.C1RNIBLinkID.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RNIBLinkID} returns this
 */
proto.interface.c1.C1RNIBLinkID.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RNIBLinkID.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string imsi = 2;
 * @return {string}
 */
proto.interface.c1.C1RNIBLinkID.prototype.getImsi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interface.c1.C1RNIBLinkID} returns this
 */
proto.interface.c1.C1RNIBLinkID.prototype.setImsi = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.repeatedFields_ = [2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RadioRepPerServCellAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RadioRepPerServCellAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.interface.c1.C1ECGI.toObject(includeInstance, f),
    cqihistList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    rihistList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    puschsinrhistList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    pucchsinrhistList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute}
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RadioRepPerServCellAttribute;
  return proto.interface.c1.C1RadioRepPerServCellAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RadioRepPerServCellAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute}
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1ECGI;
      reader.readMessage(value,proto.interface.c1.C1ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addCqihist(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRihist(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addPuschsinrhist(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addPucchsinrhist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RadioRepPerServCellAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RadioRepPerServCellAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.C1ECGI.serializeBinaryToWriter
    );
  }
  f = message.getCqihistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getRihistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPuschsinrhistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getPucchsinrhistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional C1ECGI ecgi = 1;
 * @return {?proto.interface.c1.C1ECGI}
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.getEcgi = function() {
  return /** @type{?proto.interface.c1.C1ECGI} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1ECGI, 1));
};


/**
 * @param {?proto.interface.c1.C1ECGI|undefined} value
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
*/
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string cqiHist = 2;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.getCqihistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.setCqihistList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.addCqihist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.clearCqihistList = function() {
  return this.setCqihistList([]);
};


/**
 * repeated string riHist = 3;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.getRihistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.setRihistList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.addRihist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.clearRihistList = function() {
  return this.setRihistList([]);
};


/**
 * repeated string puschSinrHist = 4;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.getPuschsinrhistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.setPuschsinrhistList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.addPuschsinrhist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.clearPuschsinrhistList = function() {
  return this.setPuschsinrhistList([]);
};


/**
 * repeated string pucchSinrHist = 5;
 * @return {!Array<string>}
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.getPucchsinrhistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.setPucchsinrhistList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.addPucchsinrhist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute} returns this
 */
proto.interface.c1.C1RadioRepPerServCellAttribute.prototype.clearPucchsinrhistList = function() {
  return this.setPucchsinrhistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RadioMeasReportPerUeAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RadioMeasReportPerUeAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    radiorepperservcellList: jspb.Message.toObjectList(msg.getRadiorepperservcellList(),
    proto.interface.c1.C1RadioRepPerServCellAttribute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RadioMeasReportPerUeAttribute}
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RadioMeasReportPerUeAttribute;
  return proto.interface.c1.C1RadioMeasReportPerUeAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RadioMeasReportPerUeAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RadioMeasReportPerUeAttribute}
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1RadioRepPerServCellAttribute;
      reader.readMessage(value,proto.interface.c1.C1RadioRepPerServCellAttribute.deserializeBinaryFromReader);
      msg.addRadiorepperservcell(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RadioMeasReportPerUeAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RadioMeasReportPerUeAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRadiorepperservcellList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.interface.c1.C1RadioRepPerServCellAttribute.serializeBinaryToWriter
    );
  }
};


/**
 * repeated C1RadioRepPerServCellAttribute radioRepPerServCell = 1;
 * @return {!Array<!proto.interface.c1.C1RadioRepPerServCellAttribute>}
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute.prototype.getRadiorepperservcellList = function() {
  return /** @type{!Array<!proto.interface.c1.C1RadioRepPerServCellAttribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interface.c1.C1RadioRepPerServCellAttribute, 1));
};


/**
 * @param {!Array<!proto.interface.c1.C1RadioRepPerServCellAttribute>} value
 * @return {!proto.interface.c1.C1RadioMeasReportPerUeAttribute} returns this
*/
proto.interface.c1.C1RadioMeasReportPerUeAttribute.prototype.setRadiorepperservcellList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.interface.c1.C1RadioRepPerServCellAttribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interface.c1.C1RadioRepPerServCellAttribute}
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute.prototype.addRadiorepperservcell = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.interface.c1.C1RadioRepPerServCellAttribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interface.c1.C1RadioMeasReportPerUeAttribute} returns this
 */
proto.interface.c1.C1RadioMeasReportPerUeAttribute.prototype.clearRadiorepperservcellList = function() {
  return this.setRadiorepperservcellList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RNIBLink.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RNIBLink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RNIBLink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBLink.toObject = function(includeInstance, msg) {
  var f, obj = {
    linkid: (f = msg.getLinkid()) && proto.interface.c1.C1RNIBLinkID.toObject(includeInstance, f),
    radiomeasreportperue: (f = msg.getRadiomeasreportperue()) && proto.interface.c1.C1RadioMeasReportPerUeAttribute.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RNIBLink}
 */
proto.interface.c1.C1RNIBLink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RNIBLink;
  return proto.interface.c1.C1RNIBLink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RNIBLink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RNIBLink}
 */
proto.interface.c1.C1RNIBLink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1RNIBLinkID;
      reader.readMessage(value,proto.interface.c1.C1RNIBLinkID.deserializeBinaryFromReader);
      msg.setLinkid(value);
      break;
    case 2:
      var value = new proto.interface.c1.C1RadioMeasReportPerUeAttribute;
      reader.readMessage(value,proto.interface.c1.C1RadioMeasReportPerUeAttribute.deserializeBinaryFromReader);
      msg.setRadiomeasreportperue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RNIBLink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RNIBLink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RNIBLink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RNIBLink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinkid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.C1RNIBLinkID.serializeBinaryToWriter
    );
  }
  f = message.getRadiomeasreportperue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.C1RadioMeasReportPerUeAttribute.serializeBinaryToWriter
    );
  }
};


/**
 * optional C1RNIBLinkID linkId = 1;
 * @return {?proto.interface.c1.C1RNIBLinkID}
 */
proto.interface.c1.C1RNIBLink.prototype.getLinkid = function() {
  return /** @type{?proto.interface.c1.C1RNIBLinkID} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RNIBLinkID, 1));
};


/**
 * @param {?proto.interface.c1.C1RNIBLinkID|undefined} value
 * @return {!proto.interface.c1.C1RNIBLink} returns this
*/
proto.interface.c1.C1RNIBLink.prototype.setLinkid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RNIBLink} returns this
 */
proto.interface.c1.C1RNIBLink.prototype.clearLinkid = function() {
  return this.setLinkid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RNIBLink.prototype.hasLinkid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional C1RadioMeasReportPerUeAttribute radioMeasReportPerUe = 2;
 * @return {?proto.interface.c1.C1RadioMeasReportPerUeAttribute}
 */
proto.interface.c1.C1RNIBLink.prototype.getRadiomeasreportperue = function() {
  return /** @type{?proto.interface.c1.C1RadioMeasReportPerUeAttribute} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RadioMeasReportPerUeAttribute, 2));
};


/**
 * @param {?proto.interface.c1.C1RadioMeasReportPerUeAttribute|undefined} value
 * @return {!proto.interface.c1.C1RNIBLink} returns this
*/
proto.interface.c1.C1RNIBLink.prototype.setRadiomeasreportperue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RNIBLink} returns this
 */
proto.interface.c1.C1RNIBLink.prototype.clearRadiomeasreportperue = function() {
  return this.setRadiomeasreportperue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RNIBLink.prototype.hasRadiomeasreportperue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1HandoverRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1HandoverRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1HandoverRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1HandoverRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    links: (f = msg.getLinks()) && proto.interface.c1.C1RNIBLinks.toObject(includeInstance, f),
    srccells: (f = msg.getSrccells()) && proto.interface.c1.C1RNIBCells.toObject(includeInstance, f),
    dstcells: (f = msg.getDstcells()) && proto.interface.c1.C1RNIBCells.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1HandoverRequest}
 */
proto.interface.c1.C1HandoverRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1HandoverRequest;
  return proto.interface.c1.C1HandoverRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1HandoverRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1HandoverRequest}
 */
proto.interface.c1.C1HandoverRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1RNIBLinks;
      reader.readMessage(value,proto.interface.c1.C1RNIBLinks.deserializeBinaryFromReader);
      msg.setLinks(value);
      break;
    case 2:
      var value = new proto.interface.c1.C1RNIBCells;
      reader.readMessage(value,proto.interface.c1.C1RNIBCells.deserializeBinaryFromReader);
      msg.setSrccells(value);
      break;
    case 3:
      var value = new proto.interface.c1.C1RNIBCells;
      reader.readMessage(value,proto.interface.c1.C1RNIBCells.deserializeBinaryFromReader);
      msg.setDstcells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1HandoverRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1HandoverRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1HandoverRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1HandoverRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinks();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.C1RNIBLinks.serializeBinaryToWriter
    );
  }
  f = message.getSrccells();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interface.c1.C1RNIBCells.serializeBinaryToWriter
    );
  }
  f = message.getDstcells();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.interface.c1.C1RNIBCells.serializeBinaryToWriter
    );
  }
};


/**
 * optional C1RNIBLinks links = 1;
 * @return {?proto.interface.c1.C1RNIBLinks}
 */
proto.interface.c1.C1HandoverRequest.prototype.getLinks = function() {
  return /** @type{?proto.interface.c1.C1RNIBLinks} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RNIBLinks, 1));
};


/**
 * @param {?proto.interface.c1.C1RNIBLinks|undefined} value
 * @return {!proto.interface.c1.C1HandoverRequest} returns this
*/
proto.interface.c1.C1HandoverRequest.prototype.setLinks = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1HandoverRequest} returns this
 */
proto.interface.c1.C1HandoverRequest.prototype.clearLinks = function() {
  return this.setLinks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1HandoverRequest.prototype.hasLinks = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional C1RNIBCells srcCells = 2;
 * @return {?proto.interface.c1.C1RNIBCells}
 */
proto.interface.c1.C1HandoverRequest.prototype.getSrccells = function() {
  return /** @type{?proto.interface.c1.C1RNIBCells} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RNIBCells, 2));
};


/**
 * @param {?proto.interface.c1.C1RNIBCells|undefined} value
 * @return {!proto.interface.c1.C1HandoverRequest} returns this
*/
proto.interface.c1.C1HandoverRequest.prototype.setSrccells = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1HandoverRequest} returns this
 */
proto.interface.c1.C1HandoverRequest.prototype.clearSrccells = function() {
  return this.setSrccells(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1HandoverRequest.prototype.hasSrccells = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional C1RNIBCells dstCells = 3;
 * @return {?proto.interface.c1.C1RNIBCells}
 */
proto.interface.c1.C1HandoverRequest.prototype.getDstcells = function() {
  return /** @type{?proto.interface.c1.C1RNIBCells} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RNIBCells, 3));
};


/**
 * @param {?proto.interface.c1.C1RNIBCells|undefined} value
 * @return {!proto.interface.c1.C1HandoverRequest} returns this
*/
proto.interface.c1.C1HandoverRequest.prototype.setDstcells = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1HandoverRequest} returns this
 */
proto.interface.c1.C1HandoverRequest.prototype.clearDstcells = function() {
  return this.setDstcells(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1HandoverRequest.prototype.hasDstcells = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interface.c1.C1RRMConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.interface.c1.C1RRMConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interface.c1.C1RRMConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RRMConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetcells: (f = msg.getTargetcells()) && proto.interface.c1.C1RNIBCells.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interface.c1.C1RRMConfiguration}
 */
proto.interface.c1.C1RRMConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interface.c1.C1RRMConfiguration;
  return proto.interface.c1.C1RRMConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interface.c1.C1RRMConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interface.c1.C1RRMConfiguration}
 */
proto.interface.c1.C1RRMConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interface.c1.C1RNIBCells;
      reader.readMessage(value,proto.interface.c1.C1RNIBCells.deserializeBinaryFromReader);
      msg.setTargetcells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interface.c1.C1RRMConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interface.c1.C1RRMConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interface.c1.C1RRMConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interface.c1.C1RRMConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetcells();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interface.c1.C1RNIBCells.serializeBinaryToWriter
    );
  }
};


/**
 * optional C1RNIBCells targetCells = 1;
 * @return {?proto.interface.c1.C1RNIBCells}
 */
proto.interface.c1.C1RRMConfiguration.prototype.getTargetcells = function() {
  return /** @type{?proto.interface.c1.C1RNIBCells} */ (
    jspb.Message.getWrapperField(this, proto.interface.c1.C1RNIBCells, 1));
};


/**
 * @param {?proto.interface.c1.C1RNIBCells|undefined} value
 * @return {!proto.interface.c1.C1RRMConfiguration} returns this
*/
proto.interface.c1.C1RRMConfiguration.prototype.setTargetcells = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.interface.c1.C1RRMConfiguration} returns this
 */
proto.interface.c1.C1RRMConfiguration.prototype.clearTargetcells = function() {
  return this.setTargetcells(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.interface.c1.C1RRMConfiguration.prototype.hasTargetcells = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.interface.c1.StationPowerOffset = {
  PA_DB_MINUS6: 0,
  PA_DB_MINUX4DOT77: 1,
  PA_DB_MINUS3: 2,
  PA_DB_MINUS1DOT77: 3,
  PA_DB_0: 4,
  PA_DB_1: 5,
  PA_DB_2: 6,
  PA_DB_3: 7
};

/**
 * @enum {number}
 */
proto.interface.c1.UEInfoType = {
  MESSAGE_TYPE_UPDATE_UE: 0,
  MESSAGE_TYPE_DELETE_UE: 1
};

/**
 * @enum {number}
 */
proto.interface.c1.C1MessageType = {
  C1_MESSAGE_UNKNOWN: 0,
  C1_GET_RNIBCELLS: 1,
  C1_GET_RNIBUES: 2,
  C1_GET_RNIBLINKS: 3,
  C1_POST_HANDOVERS: 4,
  C1_POST_RMMCONFIGURATION: 5
};

/**
 * @enum {number}
 */
proto.interface.c1.C1RNIBType = {
  C1_RNIB_UNKNOWN: 0,
  C1_RNIB_CELL: 1,
  C1_RNIB_UE: 2,
  C1_RNIB_LINK: 3
};

/**
 * @enum {number}
 */
proto.interface.c1.C1XICICPA = {
  C1_XICIC_PA_DB_MINUS6: 0,
  C1_XICIC_PA_DB_MINUX4DOT77: 1,
  C1_XICIC_PA_DB_MINUS3: 2,
  C1_XICIC_PA_DB_MINUS1DOT77: 3,
  C1_XICIC_PA_DB_0: 4,
  C1_XICIC_PA_DB_1: 5,
  C1_XICIC_PA_DB_2: 6,
  C1_XICIC_PA_DB_3: 7
};

goog.object.extend(exports, proto.interface.c1);
